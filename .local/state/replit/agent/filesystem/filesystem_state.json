{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nFuelFlow is a comprehensive petrol pump management system built as a mobile-first web application. The application enables petrol pump owners and managers to efficiently track fuel inventory, manage staff, record sales data, and generate reports. The system provides a complete solution for day-to-day operations of fuel retail outlets with multi-language support (English and Hindi) and unified role-based authentication.\n\n## Recent Changes (August 2025)\n- Implemented unified login system with role selection (dealer/manager)\n- Removed landing page - login screen shows directly on app load\n- Added manager authentication with phone number and password\n- Created role-based access control with different menu options\n- Integrated both Replit Auth (dealers) and custom authentication (managers)\n- Enhanced shift management with date selection for historical data access\n- Implemented proper database storage for product rates with density measurements\n- Added auto-population of last saved rates from previous shifts\n- Separated rate entry and density measurement sections for better organization\n- Fixed navigation conflicts between dealer and manager dashboards by creating shared state management\n- Date selector now appears above shift selector only in shift tab\n- Other manager pages (readings, stock, inventory) display selected values without selectors\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React SPA**: Built with React 18 using TypeScript and Vite for fast development and build processes\n- **UI Framework**: Utilizes shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Mobile-First Design**: Responsive design optimized for mobile devices with bottom navigation and touch-friendly interfaces\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Internationalization**: React-i18next for multi-language support (English/Hindi)\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n## Backend Architecture\n- **Node.js/Express**: RESTful API server built with Express.js using ES modules\n- **Authentication**: Replit Auth integration with OpenID Connect for secure user authentication\n- **Session Management**: Express sessions with PostgreSQL storage using connect-pg-simple\n- **API Design**: RESTful endpoints with proper error handling and logging middleware\n- **Database Layer**: Storage abstraction pattern with interface-based design for maintainability\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless driver for cloud-native scaling\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Schema Design**: Normalized relational design with proper foreign key relationships\n- **Migration System**: Drizzle Kit for database schema migrations and version control\n- **Session Storage**: PostgreSQL-backed session storage for authentication persistence\n\n## Authentication and Authorization\n- **Identity Provider**: Replit Auth with OpenID Connect protocol\n- **Session Security**: Secure HTTP-only cookies with CSRF protection\n- **Role-Based Access**: Owner, manager, and attendant roles with different permission levels\n- **User Management**: Automatic user creation and profile management from auth provider\n\n## External Dependencies\n- **Database Hosting**: Neon serverless PostgreSQL for cloud database hosting\n- **Authentication Service**: Replit Auth for user identity and session management\n- **UI Components**: Radix UI for accessible component primitives\n- **Styling**: Tailwind CSS for utility-first styling approach\n- **Development Tools**: Vite for fast development server and build optimization\n- **Production Deployment**: Replit hosting platform with built-in SSL and domain management\n\n## Key Design Patterns\n- **Repository Pattern**: Storage interface abstraction for database operations\n- **Component Composition**: Reusable UI components with prop-based customization\n- **Server State Caching**: TanStack Query for optimistic updates and background synchronization\n- **Type Safety**: End-to-end TypeScript with shared schema definitions\n- **Error Boundary**: Graceful error handling with user-friendly error messages\n- **Progressive Enhancement**: Mobile-first design with desktop enhancements","size_bytes":4456},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport {\n  insertRetailOutletSchema,\n  insertProductSchema,\n  insertTankSchema,\n  insertDispensingUnitSchema,\n  insertNozzleSchema,\n  insertStaffSchema,\n  insertShiftSalesSchema,\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Retail Outlet routes\n  app.get('/api/retail-outlet', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      res.json(outlet);\n    } catch (error) {\n      console.error(\"Error fetching retail outlet:\", error);\n      res.status(500).json({ message: \"Failed to fetch retail outlet\" });\n    }\n  });\n\n  app.post('/api/retail-outlet', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertRetailOutletSchema.parse({\n        ...req.body,\n        ownerId: userId,\n      });\n      const outlet = await storage.createRetailOutlet(validatedData);\n      res.json(outlet);\n    } catch (error) {\n      console.error(\"Error creating retail outlet:\", error);\n      res.status(400).json({ message: \"Failed to create retail outlet\" });\n    }\n  });\n\n  app.put('/api/retail-outlet/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertRetailOutletSchema.partial().parse(req.body);\n      const outlet = await storage.updateRetailOutlet(id, validatedData);\n      res.json(outlet);\n    } catch (error) {\n      console.error(\"Error updating retail outlet:\", error);\n      res.status(400).json({ message: \"Failed to update retail outlet\" });\n    }\n  });\n\n  // Product routes\n  app.get('/api/products', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      const products = await storage.getProductsByRetailOutletId(outlet.id);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Manager-accessible products endpoint\n  app.get('/api/manager/products', async (req: any, res) => {\n    try {\n      const managerId = req.session?.managerId;\n      if (!managerId) {\n        return res.status(401).json({ message: \"Manager authentication required\" });\n      }\n      \n      // Get manager details to find their retail outlet\n      const manager = await storage.getStaffById(managerId);\n      if (!manager || !manager.retailOutletId) {\n        return res.status(404).json({ message: \"Manager or retail outlet not found\" });\n      }\n      \n      const products = await storage.getProductsByRetailOutletId(manager.retailOutletId);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products for manager:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.post('/api/products', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      const validatedData = insertProductSchema.parse({\n        ...req.body,\n        retailOutletId: outlet.id,\n      });\n      const product = await storage.createProduct(validatedData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(400).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(id, validatedData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(400).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProduct(id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Tank routes\n  app.get('/api/tanks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      const tanks = await storage.getTanksByRetailOutletId(outlet.id);\n      res.json(tanks);\n    } catch (error) {\n      console.error(\"Error fetching tanks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tanks\" });\n    }\n  });\n\n  app.post('/api/tanks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      console.log(\"Raw tank data:\", req.body);\n      const validatedData = insertTankSchema.parse({\n        ...req.body,\n        retailOutletId: outlet.id,\n      });\n      console.log(\"Validated tank data:\", validatedData);\n      const tank = await storage.createTank(validatedData);\n      res.json(tank);\n    } catch (error) {\n      console.error(\"Error creating tank:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(400).json({ message: \"Failed to create tank\" });\n      }\n    }\n  });\n\n  app.put('/api/tanks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertTankSchema.partial().parse(req.body);\n      const tank = await storage.updateTank(id, validatedData);\n      res.json(tank);\n    } catch (error) {\n      console.error(\"Error updating tank:\", error);\n      res.status(400).json({ message: \"Failed to update tank\" });\n    }\n  });\n\n  app.delete('/api/tanks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTank(id);\n      res.json({ message: \"Tank deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting tank:\", error);\n      res.status(500).json({ message: \"Failed to delete tank\" });\n    }\n  });\n\n  // Dispensing Unit routes\n  app.get('/api/dispensing-units', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      const units = await storage.getDispensingUnitsByRetailOutletId(outlet.id);\n      res.json(units);\n    } catch (error) {\n      console.error(\"Error fetching dispensing units:\", error);\n      res.status(500).json({ message: \"Failed to fetch dispensing units\" });\n    }\n  });\n\n  app.post('/api/dispensing-units', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      \n      const { nozzles, ...duData } = req.body;\n      \n      // Create dispensing unit\n      const validatedDUData = insertDispensingUnitSchema.parse({\n        ...duData,\n        retailOutletId: outlet.id,\n      });\n      const unit = await storage.createDispensingUnit(validatedDUData);\n      \n      // Create nozzles for the dispensing unit\n      if (nozzles && nozzles.length > 0) {\n        for (let i = 0; i < nozzles.length; i++) {\n          const nozzle = nozzles[i];\n          const validatedNozzleData = insertNozzleSchema.parse({\n            ...nozzle,\n            dispensingUnitId: unit.id,\n            nozzleNumber: i + 1,\n            calibrationValidUntil: new Date(nozzle.calibrationValidUntil),\n          });\n          await storage.createNozzle(validatedNozzleData);\n        }\n      }\n      \n      res.json(unit);\n    } catch (error) {\n      console.error(\"Error creating dispensing unit:\", error);\n      res.status(400).json({ message: \"Failed to create dispensing unit\" });\n    }\n  });\n\n  app.put('/api/dispensing-units/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertDispensingUnitSchema.partial().parse(req.body);\n      const unit = await storage.updateDispensingUnit(id, validatedData);\n      res.json(unit);\n    } catch (error) {\n      console.error(\"Error updating dispensing unit:\", error);\n      res.status(400).json({ message: \"Failed to update dispensing unit\" });\n    }\n  });\n\n  app.delete('/api/dispensing-units/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteDispensingUnit(id);\n      res.json({ message: \"Dispensing unit deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting dispensing unit:\", error);\n      res.status(500).json({ message: \"Failed to delete dispensing unit\" });\n    }\n  });\n\n  // Manager routes for nozzle readings\n  app.get(\"/api/manager/nozzles\", (req: any, res, next) => {\n    console.log(\"Manager nozzles request - session:\", {\n      managerId: req.session?.managerId,\n      userType: req.session?.userType,\n      sessionKeys: Object.keys(req.session || {})\n    });\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const manager = await storage.getStaffById(managerId);\n      if (!manager) {\n        return res.status(401).json({ message: \"Manager not found\" });\n      }\n      const nozzles = await storage.getNozzlesByRetailOutletId(manager.retailOutletId);\n      res.json(nozzles);\n    } catch (error) {\n      console.error(\"Error fetching nozzles for manager:\", error);\n      res.status(500).json({ message: \"Failed to fetch nozzles\" });\n    }\n  });\n\n  // Route for path parameters: /api/manager/readings/:shiftType/:shiftDate\n  app.get(\"/api/manager/readings/:shiftType/:shiftDate\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const manager = await storage.getStaffById(managerId);\n      if (!manager) {\n        return res.status(401).json({ message: \"Manager not found\" });\n      }\n      const { shiftType, shiftDate } = req.params;\n      console.log(`[READINGS API] Fetching readings for outlet: ${manager.retailOutletId}, shift: ${shiftType}, date: ${shiftDate}`);\n      \n      const readings = await storage.getNozzleReadings(\n        manager.retailOutletId, \n        shiftType as string, \n        shiftDate as string\n      );\n      \n      console.log(`[READINGS API] Found ${readings.length} readings`);\n      if (readings.length > 0) {\n        console.log(`[READINGS API] First reading:`, JSON.stringify(readings[0], null, 2));\n      }\n      \n      res.json(readings);\n    } catch (error) {\n      console.error(\"Error fetching readings:\", error);\n      res.status(500).json({ message: \"Failed to fetch readings\" });\n    }\n  });\n\n  // Route for query parameters: /api/manager/readings?shiftType=morning&shiftDate=2025-08-08\n  app.get(\"/api/manager/readings\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const manager = await storage.getStaffById(managerId);\n      if (!manager) {\n        return res.status(401).json({ message: \"Manager not found\" });\n      }\n      const { shiftType, shiftDate } = req.query;\n      console.log(`[READINGS API QUERY] Fetching readings for outlet: ${manager.retailOutletId}, shift: ${shiftType}, date: ${shiftDate}`);\n      \n      const readings = await storage.getNozzleReadings(\n        manager.retailOutletId, \n        shiftType as string, \n        shiftDate as string\n      );\n      \n      console.log(`[READINGS API QUERY] Found ${readings.length} readings`);\n      if (readings.length > 0) {\n        console.log(`[READINGS API QUERY] First reading:`, JSON.stringify(readings[0], null, 2));\n      }\n      \n      res.json(readings);\n    } catch (error) {\n      console.error(\"Error fetching readings:\", error);\n      res.status(500).json({ message: \"Failed to fetch readings\" });\n    }\n  });\n\n  app.post(\"/api/manager/readings\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const manager = await storage.getStaffById(managerId);\n      if (!manager) {\n        return res.status(401).json({ message: \"Manager not found\" });\n      }\n      const readingData = {\n        ...req.body,\n        retailOutletId: manager.retailOutletId,\n      };\n      \n      const reading = await storage.createNozzleReading(readingData);\n      res.status(201).json(reading);\n    } catch (error) {\n      console.error(\"Error creating reading:\", error);\n      res.status(500).json({ message: \"Failed to create reading\" });\n    }\n  });\n\n  // Update reading route\n  app.patch(\"/api/manager/readings/:id\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const manager = await storage.getStaffById(managerId);\n      if (!manager) {\n        return res.status(401).json({ message: \"Manager not found\" });\n      }\n      \n      const readingData = {\n        ...req.body,\n        retailOutletId: manager.retailOutletId,\n      };\n      \n      const reading = await storage.updateNozzleReading(req.params.id, readingData);\n      res.json(reading);\n    } catch (error) {\n      console.error(\"Error updating reading:\", error);\n      res.status(500).json({ message: \"Failed to update reading\" });\n    }\n  });\n\n  app.get(\"/api/manager/nozzles/:nozzleId/last-reading\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const reading = await storage.getLastNozzleReading(req.params.nozzleId);\n      res.json(reading || null);\n    } catch (error) {\n      console.error(\"Error fetching last reading:\", error);\n      res.status(500).json({ message: \"Failed to fetch last reading\" });\n    }\n  });\n\n  // Get attendants for nozzle readings\n  app.get(\"/api/manager/attendants\", (req: any, res, next) => {\n    console.log(\"Manager attendants request - session:\", {\n      managerId: req.session?.managerId,\n      userType: req.session?.userType,\n      sessionKeys: Object.keys(req.session || {})\n    });\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const manager = await storage.getStaffById(managerId);\n      if (!manager) {\n        return res.status(401).json({ message: \"Manager not found\" });\n      }\n      const allStaff = await storage.getStaffByRetailOutletId(manager.retailOutletId);\n      const attendants = allStaff.filter(staff => staff.role === 'attendant' && staff.isActive);\n      res.json(attendants);\n    } catch (error) {\n      console.error(\"Error fetching attendants:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendants\" });\n    }\n  });\n\n  // Staff routes\n  app.get('/api/staff', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      const staffMembers = await storage.getStaffByRetailOutletId(outlet.id);\n      res.json(staffMembers);\n    } catch (error) {\n      console.error(\"Error fetching staff:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  app.post('/api/staff', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      const validatedData = insertStaffSchema.parse({\n        ...req.body,\n        retailOutletId: outlet.id,\n      });\n      const staffMember = await storage.createStaff(validatedData);\n      res.json(staffMember);\n    } catch (error) {\n      console.error(\"Error creating staff member:\", error);\n      res.status(400).json({ message: \"Failed to create staff member\" });\n    }\n  });\n\n  app.put('/api/staff/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      \n      const staffId = req.params.id;\n      const existingStaff = await storage.getStaffById(staffId);\n      if (!existingStaff || existingStaff.retailOutletId !== outlet.id) {\n        return res.status(404).json({ message: \"Staff member not found\" });\n      }\n\n      // For soft delete, only allow isActive field\n      if (req.body.isActive !== undefined) {\n        const updatedStaff = await storage.updateStaff(staffId, { isActive: req.body.isActive });\n        return res.json(updatedStaff);\n      }\n\n      // For full update, validate all fields\n      const validatedData = insertStaffSchema.omit({ retailOutletId: true }).parse(req.body);\n      const updatedStaff = await storage.updateStaff(staffId, validatedData);\n      res.json(updatedStaff);\n    } catch (error) {\n      console.error(\"Error updating staff member:\", error);\n      res.status(400).json({ message: \"Failed to update staff member\" });\n    }\n  });\n\n  app.delete('/api/staff/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteStaff(id);\n      res.json({ message: \"Staff member deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting staff member:\", error);\n      res.status(500).json({ message: \"Failed to delete staff member\" });\n    }\n  });\n\n  // Shift Sales routes\n  app.get('/api/shift-sales', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const shiftSales = await storage.getShiftSalesByRetailOutletId(outlet.id, limit);\n      res.json(shiftSales);\n    } catch (error) {\n      console.error(\"Error fetching shift sales:\", error);\n      res.status(500).json({ message: \"Failed to fetch shift sales\" });\n    }\n  });\n\n  app.post('/api/shift-sales', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      const validatedData = insertShiftSalesSchema.parse({\n        ...req.body,\n        retailOutletId: outlet.id,\n      });\n      const shiftSales = await storage.createShiftSales(validatedData);\n      res.json(shiftSales);\n    } catch (error) {\n      console.error(\"Error creating shift sales:\", error);\n      res.status(400).json({ message: \"Failed to create shift sales\" });\n    }\n  });\n\n  app.get('/api/sales-stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const outlet = await storage.getRetailOutletByOwnerId(userId);\n      if (!outlet) {\n        return res.status(404).json({ message: \"Retail outlet not found\" });\n      }\n      const stats = await storage.getShiftSalesStats(outlet.id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching sales stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales stats\" });\n    }\n  });\n\n  // Managers routes - simple mock endpoints for now\n\n\n  // Settings routes - simple mock endpoints for now\n  app.get('/api/settings', isAuthenticated, async (req: any, res) => {\n    try {\n      // Return default settings\n      res.json({\n        id: \"default-settings\",\n        fuelPrices: {\n          petrol: 100.00,\n          diesel: 95.00,\n          premium: 105.00\n        },\n        appSettings: {\n          enableNotifications: true,\n          autoBackup: true,\n          showLowStockAlerts: true,\n          requireShiftConfirmation: false\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.put('/api/settings', isAuthenticated, async (req: any, res) => {\n    try {\n      // Mock successful update\n      res.json({ \n        id: \"default-settings\",\n        ...req.body,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.error(\"Error updating settings:\", error);\n      res.status(400).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // Manager login endpoint\n  app.post(\"/api/manager/login\", async (req, res) => {\n    try {\n      const { phoneNumber, password } = req.body;\n      \n      console.log(\"Manager login attempt:\", { phoneNumber, password: password ? \"***\" : \"empty\" });\n      \n      if (!phoneNumber || !password) {\n        console.log(\"Missing phoneNumber or password\");\n        return res.status(400).json({ \n          success: false, \n          message: \"Phone number and password are required\" \n        });\n      }\n\n      // Find manager with matching phone number and password\n      const manager = await storage.getManagerByCredentials(phoneNumber, password);\n      \n      console.log(\"Manager found:\", manager ? `Yes - ${manager.name}` : \"No\");\n      \n      if (!manager) {\n        console.log(\"Invalid credentials for:\", phoneNumber);\n        return res.status(401).json({ \n          success: false, \n          message: \"Invalid credentials\" \n        });\n      }\n\n      // Create manager session with full manager data\n      (req.session as any).managerId = manager.id;\n      (req.session as any).userType = \"manager\";\n      (req.session as any).manager = {\n        id: manager.id,\n        name: manager.name,\n        role: \"manager\",\n        phoneNumber: manager.phoneNumber,\n        retailOutletId: manager.retailOutletId\n      };\n      \n      res.json({ \n        success: true, \n        message: \"Login successful\",\n        user: {\n          id: manager.id,\n          name: manager.name,\n          role: \"manager\",\n          phoneNumber: manager.phoneNumber,\n          retailOutletId: manager.retailOutletId\n        }\n      });\n    } catch (error) {\n      console.error(\"Manager login error:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"Login failed\" \n      });\n    }\n  });\n\n  // Manager auth check\n  app.get('/api/auth/manager', async (req, res) => {\n    try {\n      const session = req.session as any;\n      if (!session.managerId || session.userType !== \"manager\") {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const manager = await storage.getStaffById(session.managerId);\n      if (!manager || manager.role !== \"manager\" || !manager.isActive) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      res.json({\n        id: manager.id,\n        name: manager.name,\n        role: \"manager\",\n        phoneNumber: manager.phoneNumber,\n        retailOutletId: manager.retailOutletId\n      });\n    } catch (error) {\n      console.error(\"Manager auth error:\", error);\n      res.status(500).json({ message: \"Authentication failed\" });\n    }\n  });\n\n  // Manager logout endpoint\n  app.post('/api/manager/logout', async (req, res) => {\n    try {\n      const session = req.session as any;\n      session.managerId = null;\n      session.userType = null;\n      \n      req.session.destroy((err) => {\n        if (err) {\n          console.error(\"Session destruction error:\", err);\n          return res.status(500).json({ success: false, message: \"Logout failed\" });\n        }\n        res.clearCookie('connect.sid');\n        res.json({ success: true, message: \"Logged out successfully\" });\n      });\n    } catch (error) {\n      console.error(\"Manager logout error:\", error);\n      res.status(500).json({ success: false, message: \"Logout failed\" });\n    }\n  });\n\n  // Shift routes for managers\n  app.get('/api/shifts/current', async (req: any, res) => {\n    try {\n      // Get current manager from session (assuming manager auth middleware)\n      const managerId = req.session?.managerId;\n      if (!managerId) {\n        return res.status(401).json({ message: \"Manager authentication required\" });\n      }\n      \n      const currentShift = await storage.getCurrentShift(managerId);\n      res.json(currentShift);\n    } catch (error) {\n      console.error(\"Error fetching current shift:\", error);\n      res.status(500).json({ message: \"Failed to fetch current shift\" });\n    }\n  });\n\n  app.get('/api/shifts/last-rates', async (req: any, res) => {\n    try {\n      const managerId = req.session?.managerId;\n      if (!managerId) {\n        return res.status(401).json({ message: \"Manager authentication required\" });\n      }\n      \n      const { date, shiftType } = req.query;\n      const lastRates = await storage.getLastProductRates(managerId, date as string, shiftType as string);\n      res.json(lastRates);\n    } catch (error) {\n      console.error(\"Error fetching last rates:\", error);\n      res.status(500).json({ message: \"Failed to fetch last rates\" });\n    }\n  });\n\n  app.post('/api/shifts/rates', async (req: any, res) => {\n    try {\n      const managerId = req.session?.managerId;\n      if (!managerId) {\n        return res.status(401).json({ message: \"Manager authentication required\" });\n      }\n      \n      const { shiftType, rates, date } = req.body;\n      console.log('Saving rates for manager:', managerId, 'shift:', shiftType, 'date:', date, 'rates:', rates);\n      await storage.saveProductRates(managerId, shiftType, rates, date);\n      res.json({ message: \"Rates saved successfully\", success: true });\n    } catch (error) {\n      console.error(\"Error saving rates:\", error);\n      res.status(500).json({ \n        message: \"Failed to save rates\", \n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.post('/api/shifts/start', async (req: any, res) => {\n    try {\n      const managerId = req.session?.managerId;\n      if (!managerId) {\n        return res.status(401).json({ message: \"Manager authentication required\" });\n      }\n      \n      const { shiftType, productRates } = req.body;\n      const shift = await storage.startShift(managerId, shiftType, productRates);\n      res.json(shift);\n    } catch (error) {\n      console.error(\"Error starting shift:\", error);\n      res.status(500).json({ message: \"Failed to start shift\" });\n    }\n  });\n\n  // Stock entry routes for managers\n  app.get(\"/api/manager/stock/:shiftType/:shiftDate\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const manager = await storage.getStaffById(managerId);\n      if (!manager) {\n        return res.status(401).json({ message: \"Manager not found\" });\n      }\n      const { shiftType, shiftDate } = req.params;\n      const stockEntries = await storage.getStockEntries(manager.retailOutletId, shiftType, shiftDate);\n      res.json(stockEntries);\n    } catch (error) {\n      console.error(\"Error fetching stock entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch stock entries\" });\n    }\n  });\n\n  app.get(\"/api/manager/tanks\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const manager = await storage.getStaffById(managerId);\n      if (!manager) {\n        return res.status(401).json({ message: \"Manager not found\" });\n      }\n      const tanks = await storage.getTanksByRetailOutletIdWithProduct(manager.retailOutletId);\n      res.json(tanks);\n    } catch (error) {\n      console.error(\"Error fetching tanks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tanks\" });\n    }\n  });\n\n  app.post(\"/api/manager/stock\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const manager = await storage.getStaffById(managerId);\n      if (!manager) {\n        return res.status(401).json({ message: \"Manager not found\" });\n      }\n      \n      const stockData = {\n        ...req.body,\n        retailOutletId: manager.retailOutletId,\n        managerId: managerId,\n      };\n      \n      const stockEntry = await storage.createStockEntry(stockData);\n      res.status(201).json(stockEntry);\n    } catch (error) {\n      console.error(\"Error creating stock entry:\", error);\n      res.status(500).json({ message: \"Failed to create stock entry\" });\n    }\n  });\n\n  app.patch(\"/api/manager/stock/:id\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const stockEntry = await storage.updateStockEntry(req.params.id, req.body);\n      res.json(stockEntry);\n    } catch (error) {\n      console.error(\"Error updating stock entry:\", error);\n      res.status(500).json({ message: \"Failed to update stock entry\" });\n    }\n  });\n\n  // Submit shift data route\n  app.post(\"/api/manager/submit-shift\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const { shiftType, shiftDate } = req.body;\n      \n      await storage.submitShiftData(managerId, shiftType, shiftDate);\n      res.json({ message: \"Shift data submitted successfully\" });\n    } catch (error) {\n      console.error(\"Error submitting shift data:\", error);\n      res.status(500).json({ message: \"Failed to submit shift data\" });\n    }\n  });\n\n  // Check if shift is submitted route\n  app.get(\"/api/manager/shift-status/:shiftType/:shiftDate\", (req: any, res, next) => {\n    if (!req.session?.managerId || req.session?.userType !== \"manager\") {\n      return res.status(401).json({ message: \"Manager authentication required\" });\n    }\n    next();\n  }, async (req: any, res) => {\n    try {\n      const managerId = req.session.managerId;\n      const { shiftType, shiftDate } = req.params;\n      \n      const isSubmitted = await storage.isShiftSubmitted(managerId, shiftType, shiftDate);\n      res.json({ isSubmitted });\n    } catch (error) {\n      console.error(\"Error checking shift status:\", error);\n      res.status(500).json({ message: \"Failed to check shift status\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":33859},"server/storage.ts":{"content":"import {\n  users,\n  retailOutlets,\n  products,\n  tanks,\n  dispensingUnits,\n  nozzles,\n  staff,\n  shiftSales,\n  shifts,\n  nozzleReadings,\n  type User,\n  type UpsertUser,\n  type RetailOutlet,\n  type InsertRetailOutlet,\n  type Product,\n  type InsertProduct,\n  type Tank,\n  type InsertTank,\n  type DispensingUnit,\n  type InsertDispensingUnit,\n  type Nozzle,\n  type InsertNozzle,\n  type Staff,\n  type InsertStaff,\n  type ShiftSales,\n  type InsertShiftSales,\n  type Shift,\n  type InsertShift,\n  type NozzleReading,\n  type InsertNozzleReading,\n  type StockEntry,\n  type InsertStockEntry,\n  stockEntries,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, gte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations - mandatory for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Retail Outlet operations\n  getRetailOutletByOwnerId(ownerId: string): Promise<RetailOutlet | undefined>;\n  createRetailOutlet(outlet: InsertRetailOutlet): Promise<RetailOutlet>;\n  updateRetailOutlet(id: string, outlet: Partial<InsertRetailOutlet>): Promise<RetailOutlet>;\n  \n  // Product operations\n  getProductsByRetailOutletId(retailOutletId: string): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Tank operations\n  getTanksByRetailOutletId(retailOutletId: string): Promise<Tank[]>;\n  createTank(tank: InsertTank): Promise<Tank>;\n  updateTank(id: string, tank: Partial<InsertTank>): Promise<Tank>;\n  deleteTank(id: string): Promise<void>;\n  \n  // Dispensing Unit operations\n  getDispensingUnitsByRetailOutletId(retailOutletId: string): Promise<DispensingUnit[]>;\n  createDispensingUnit(unit: InsertDispensingUnit): Promise<DispensingUnit>;\n  updateDispensingUnit(id: string, unit: Partial<InsertDispensingUnit>): Promise<DispensingUnit>;\n  deleteDispensingUnit(id: string): Promise<void>;\n\n  // Nozzle operations\n  getNozzlesByDispensingUnitId(dispensingUnitId: string): Promise<Nozzle[]>;\n  getNozzlesByRetailOutletId(retailOutletId: string): Promise<Nozzle[]>;\n  createNozzle(nozzle: InsertNozzle): Promise<Nozzle>;\n  updateNozzle(id: string, nozzle: Partial<InsertNozzle>): Promise<Nozzle>;\n  deleteNozzle(id: string): Promise<void>;\n\n  // Nozzle Reading operations\n  getNozzleReadings(retailOutletId: string, shiftType?: string, shiftDate?: string): Promise<NozzleReading[]>;\n  getNozzleReadingsByAttendant(attendantId: string, shiftType?: string, shiftDate?: string): Promise<NozzleReading[]>;\n  createNozzleReading(reading: InsertNozzleReading): Promise<NozzleReading>;\n  updateNozzleReading(id: string, reading: Partial<InsertNozzleReading>): Promise<NozzleReading>;\n  getLastNozzleReading(nozzleId: string): Promise<NozzleReading | undefined>;\n  \n  // Staff operations\n  getStaffByRetailOutletId(retailOutletId: string): Promise<Staff[]>;\n  getStaffById(id: string): Promise<Staff | undefined>;\n  createStaff(staffMember: InsertStaff): Promise<Staff>;\n  updateStaff(id: string, staffMember: Partial<InsertStaff>): Promise<Staff>;\n  deleteStaff(id: string): Promise<void>;\n  getManagerByCredentials(phoneNumber: string, password: string): Promise<Staff | undefined>;\n  \n  // Shift Sales operations\n  getShiftSalesByRetailOutletId(retailOutletId: string, limit?: number): Promise<ShiftSales[]>;\n  createShiftSales(sales: InsertShiftSales): Promise<ShiftSales>;\n  updateShiftSales(id: string, sales: Partial<InsertShiftSales>): Promise<ShiftSales>;\n  getShiftSalesStats(retailOutletId: string): Promise<{\n    weeklySales: number;\n    monthlySales: number;\n    paymentMethodBreakdown: {\n      cash: number;\n      credit: number;\n      upi: number;\n      card: number;\n    };\n  }>;\n\n  // Shift operations for managers\n  getCurrentShift(managerId: string): Promise<any>;\n  getLastProductRates(managerId: string): Promise<any[]>;\n  saveProductRates(managerId: string, shiftType: string, rates: any[]): Promise<void>;\n  startShift(managerId: string, shiftType: string, productRates: any[]): Promise<any>;\n  submitShiftData(managerId: string, shiftType: string, shiftDate: string): Promise<void>;\n  isShiftSubmitted(managerId: string, shiftType: string, shiftDate: string): Promise<boolean>;\n\n  // Stock Entry operations\n  getStockEntries(retailOutletId: string, shiftType?: string, shiftDate?: string): Promise<any[]>;\n  getStockEntriesByTank(tankId: string, shiftType?: string, shiftDate?: string): Promise<StockEntry[]>;\n  createStockEntry(entry: InsertStockEntry): Promise<StockEntry>;\n  updateStockEntry(id: string, entry: Partial<InsertStockEntry>): Promise<StockEntry>;\n  getTanksByRetailOutletIdWithProduct(retailOutletId: string): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Retail Outlet operations\n  async getRetailOutletByOwnerId(ownerId: string): Promise<RetailOutlet | undefined> {\n    const [outlet] = await db\n      .select()\n      .from(retailOutlets)\n      .where(eq(retailOutlets.ownerId, ownerId));\n    return outlet;\n  }\n\n  async createRetailOutlet(outlet: InsertRetailOutlet): Promise<RetailOutlet> {\n    const [newOutlet] = await db\n      .insert(retailOutlets)\n      .values(outlet)\n      .returning();\n    return newOutlet;\n  }\n\n  async updateRetailOutlet(id: string, outlet: Partial<InsertRetailOutlet>): Promise<RetailOutlet> {\n    const [updatedOutlet] = await db\n      .update(retailOutlets)\n      .set({ ...outlet, updatedAt: new Date() })\n      .where(eq(retailOutlets.id, id))\n      .returning();\n    return updatedOutlet;\n  }\n\n  // Product operations\n  async getProductsByRetailOutletId(retailOutletId: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.retailOutletId, retailOutletId), eq(products.isActive, true)))\n      .orderBy(products.name);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db\n      .insert(products)\n      .values(product)\n      .returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db\n      .update(products)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(products.id, id));\n  }\n\n  // Tank operations\n  async getTanksByRetailOutletId(retailOutletId: string): Promise<any[]> {\n    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n    \n    // Get tanks with product information\n    const tanksWithProduct = await db\n      .select({\n        id: tanks.id,\n        retailOutletId: tanks.retailOutletId,\n        productId: tanks.productId,\n        tankNumber: tanks.tankNumber,\n        capacity: tanks.capacity,\n        length: tanks.length,\n        diameter: tanks.diameter,\n        isActive: tanks.isActive,\n        createdAt: tanks.createdAt,\n        updatedAt: tanks.updatedAt,\n        productName: products.name,\n      })\n      .from(tanks)\n      .innerJoin(products, eq(tanks.productId, products.id))\n      .where(and(eq(tanks.retailOutletId, retailOutletId), eq(tanks.isActive, true)))\n      .orderBy(tanks.tankNumber);\n\n    // Calculate current stock for each tank\n    const tanksWithStock = await Promise.all(\n      tanksWithProduct.map(async (tank) => {\n        // Get the latest stock entry for this tank\n        const latestStockEntry = await db\n          .select()\n          .from(stockEntries)\n          .where(eq(stockEntries.tankId, tank.id))\n          .orderBy(desc(stockEntries.shiftDate), desc(stockEntries.createdAt))\n          .limit(1);\n\n        // Get total fuel dispensed from nozzle readings since the stock entry\n        const stockEntryDate = latestStockEntry[0]?.shiftDate || today;\n        \n        const totalDispensed = await db\n          .select({\n            totalDispensed: sql<string>`COALESCE(SUM(${nozzleReadings.currentReading} - ${nozzleReadings.previousReading} - COALESCE(${nozzleReadings.testing}, 0)), 0)`,\n          })\n          .from(nozzleReadings)\n          .innerJoin(nozzles, eq(nozzleReadings.nozzleId, nozzles.id))\n          .where(\n            and(\n              eq(nozzles.tankId, tank.id),\n              gte(nozzleReadings.shiftDate, stockEntryDate)\n            )\n          );\n\n        // Calculate current stock: opening stock + receipts - dispensed\n        const openingStock = parseFloat(latestStockEntry[0]?.openingStock || \"0\");\n        const receipts = parseFloat(latestStockEntry[0]?.receipt || \"0\");\n        const dispensed = parseFloat(totalDispensed[0]?.totalDispensed || \"0\");\n        const currentStock = Math.max(0, openingStock + receipts - dispensed);\n\n        return {\n          ...tank,\n          currentStock: currentStock.toString(),\n        };\n      })\n    );\n\n    return tanksWithStock;\n  }\n\n  async createTank(tank: InsertTank): Promise<Tank> {\n    const [newTank] = await db\n      .insert(tanks)\n      .values(tank)\n      .returning();\n    return newTank;\n  }\n\n  async updateTank(id: string, tank: Partial<InsertTank>): Promise<Tank> {\n    const [updatedTank] = await db\n      .update(tanks)\n      .set({ ...tank, updatedAt: new Date() })\n      .where(eq(tanks.id, id))\n      .returning();\n    return updatedTank;\n  }\n\n  async deleteTank(id: string): Promise<void> {\n    await db\n      .update(tanks)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(tanks.id, id));\n  }\n\n  // Dispensing Unit operations\n  async getDispensingUnitsByRetailOutletId(retailOutletId: string): Promise<DispensingUnit[]> {\n    return await db\n      .select()\n      .from(dispensingUnits)\n      .where(and(eq(dispensingUnits.retailOutletId, retailOutletId), eq(dispensingUnits.isActive, true)))\n      .orderBy(dispensingUnits.name);\n  }\n\n  async createDispensingUnit(unit: InsertDispensingUnit): Promise<DispensingUnit> {\n    const [newUnit] = await db\n      .insert(dispensingUnits)\n      .values(unit)\n      .returning();\n    return newUnit;\n  }\n\n  async updateDispensingUnit(id: string, unit: Partial<InsertDispensingUnit>): Promise<DispensingUnit> {\n    const [updatedUnit] = await db\n      .update(dispensingUnits)\n      .set({ ...unit, updatedAt: new Date() })\n      .where(eq(dispensingUnits.id, id))\n      .returning();\n    return updatedUnit;\n  }\n\n  async deleteDispensingUnit(id: string): Promise<void> {\n    await db\n      .update(dispensingUnits)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(dispensingUnits.id, id));\n  }\n\n  // Nozzle operations\n  async getNozzlesByDispensingUnitId(dispensingUnitId: string): Promise<Nozzle[]> {\n    return await db\n      .select()\n      .from(nozzles)\n      .where(and(eq(nozzles.dispensingUnitId, dispensingUnitId), eq(nozzles.isActive, true)))\n      .orderBy(nozzles.nozzleNumber);\n  }\n\n  async createNozzle(nozzle: InsertNozzle): Promise<Nozzle> {\n    const [newNozzle] = await db\n      .insert(nozzles)\n      .values(nozzle)\n      .returning();\n    return newNozzle;\n  }\n\n  async updateNozzle(id: string, nozzle: Partial<InsertNozzle>): Promise<Nozzle> {\n    const [updatedNozzle] = await db\n      .update(nozzles)\n      .set({ ...nozzle, updatedAt: new Date() })\n      .where(eq(nozzles.id, id))\n      .returning();\n    return updatedNozzle;\n  }\n\n  async deleteNozzle(id: string): Promise<void> {\n    await db\n      .update(nozzles)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(nozzles.id, id));\n  }\n\n  // Staff operations\n  async getStaffByRetailOutletId(retailOutletId: string): Promise<Staff[]> {\n    return await db\n      .select()\n      .from(staff)\n      .where(eq(staff.retailOutletId, retailOutletId))\n      .orderBy(staff.name);\n  }\n\n  async getStaffById(id: string): Promise<Staff | undefined> {\n    const [staffMember] = await db\n      .select()\n      .from(staff)\n      .where(eq(staff.id, id));\n    return staffMember;\n  }\n\n  async createStaff(staffMember: InsertStaff): Promise<Staff> {\n    const [newStaff] = await db\n      .insert(staff)\n      .values(staffMember)\n      .returning();\n    return newStaff;\n  }\n\n  async updateStaff(id: string, staffMember: Partial<InsertStaff>): Promise<Staff> {\n    const [updatedStaff] = await db\n      .update(staff)\n      .set({ ...staffMember, updatedAt: new Date() })\n      .where(eq(staff.id, id))\n      .returning();\n    return updatedStaff;\n  }\n\n  async deleteStaff(id: string): Promise<void> {\n    await db\n      .update(staff)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(staff.id, id));\n  }\n\n  async getManagerByCredentials(phoneNumber: string, password: string): Promise<Staff | undefined> {\n    console.log(\"Searching for manager with phoneNumber:\", phoneNumber, \"password:\", password ? \"***\" : \"empty\");\n    const [manager] = await db\n      .select()\n      .from(staff)\n      .where(\n        and(\n          eq(staff.phoneNumber, phoneNumber),\n          eq(staff.password, password),\n          eq(staff.role, \"manager\"),\n          eq(staff.isActive, true)\n        )\n      );\n    console.log(\"Manager query result:\", manager ? `Found: ${manager.name}` : \"Not found\");\n    return manager;\n  }\n\n  // Shift Sales operations\n  async getShiftSalesByRetailOutletId(retailOutletId: string, limit = 10): Promise<ShiftSales[]> {\n    return await db\n      .select()\n      .from(shiftSales)\n      .where(eq(shiftSales.retailOutletId, retailOutletId))\n      .orderBy(desc(shiftSales.shiftDate))\n      .limit(limit);\n  }\n\n  async createShiftSales(sales: InsertShiftSales): Promise<ShiftSales> {\n    const totalSales = Number(sales.cashSales || 0) + \n                     Number(sales.creditSales || 0) + \n                     Number(sales.upiSales || 0) + \n                     Number(sales.cardSales || 0);\n    \n    const [newSales] = await db\n      .insert(shiftSales)\n      .values({ ...sales, totalSales: totalSales.toString() })\n      .returning();\n    return newSales;\n  }\n\n  async updateShiftSales(id: string, sales: Partial<InsertShiftSales>): Promise<ShiftSales> {\n    const [updatedSales] = await db\n      .update(shiftSales)\n      .set({ ...sales, updatedAt: new Date() })\n      .where(eq(shiftSales.id, id))\n      .returning();\n    return updatedSales;\n  }\n\n  async getShiftSalesStats(retailOutletId: string): Promise<{\n    weeklySales: number;\n    monthlySales: number;\n    paymentMethodBreakdown: {\n      cash: number;\n      credit: number;\n      upi: number;\n      card: number;\n    };\n  }> {\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    \n    const monthAgo = new Date();\n    monthAgo.setMonth(monthAgo.getMonth() - 1);\n\n    const [weeklyResult] = await db\n      .select({\n        totalSales: sql<number>`SUM(CAST(total_sales AS DECIMAL))`,\n      })\n      .from(shiftSales)\n      .where(\n        and(\n          eq(shiftSales.retailOutletId, retailOutletId),\n          sql`shift_date >= ${weekAgo}`\n        )\n      );\n\n    const [monthlyResult] = await db\n      .select({\n        totalSales: sql<number>`SUM(CAST(total_sales AS DECIMAL))`,\n      })\n      .from(shiftSales)\n      .where(\n        and(\n          eq(shiftSales.retailOutletId, retailOutletId),\n          sql`shift_date >= ${monthAgo}`\n        )\n      );\n\n    const [paymentBreakdown] = await db\n      .select({\n        cash: sql<number>`SUM(CAST(cash_sales AS DECIMAL))`,\n        credit: sql<number>`SUM(CAST(credit_sales AS DECIMAL))`,\n        upi: sql<number>`SUM(CAST(upi_sales AS DECIMAL))`,\n        card: sql<number>`SUM(CAST(card_sales AS DECIMAL))`,\n      })\n      .from(shiftSales)\n      .where(\n        and(\n          eq(shiftSales.retailOutletId, retailOutletId),\n          sql`shift_date >= ${monthAgo}`\n        )\n      );\n\n    return {\n      weeklySales: weeklyResult?.totalSales || 0,\n      monthlySales: monthlyResult?.totalSales || 0,\n      paymentMethodBreakdown: {\n        cash: paymentBreakdown?.cash || 0,\n        credit: paymentBreakdown?.credit || 0,\n        upi: paymentBreakdown?.upi || 0,\n        card: paymentBreakdown?.card || 0,\n      },\n    };\n  }\n\n  // Stock Entry operations\n  async getStockEntries(retailOutletId: string, shiftType?: string, shiftDate?: string): Promise<any[]> {\n    const baseQuery = db\n      .select({\n        id: stockEntries.id,\n        tankId: stockEntries.tankId,\n        shiftType: stockEntries.shiftType,\n        shiftDate: stockEntries.shiftDate,\n        openingStock: stockEntries.openingStock,\n        receipt: stockEntries.receipt,\n        invoiceValue: stockEntries.invoiceValue,\n        createdAt: stockEntries.createdAt,\n        updatedAt: stockEntries.updatedAt,\n        tankNumber: tanks.tankNumber,\n        productName: products.name,\n        productId: products.id,\n      })\n      .from(stockEntries)\n      .innerJoin(tanks, eq(stockEntries.tankId, tanks.id))\n      .innerJoin(products, eq(tanks.productId, products.id));\n\n    if (shiftType && shiftDate) {\n      return await baseQuery.where(\n        and(\n          eq(stockEntries.retailOutletId, retailOutletId),\n          sql`${stockEntries.shiftType} = ${shiftType}`,\n          eq(stockEntries.shiftDate, shiftDate)\n        )\n      );\n    }\n\n    return await baseQuery.where(eq(stockEntries.retailOutletId, retailOutletId));\n  }\n\n  async getStockEntriesByTank(tankId: string, shiftType?: string, shiftDate?: string): Promise<StockEntry[]> {\n    const baseQuery = db.select().from(stockEntries);\n\n    if (shiftType && shiftDate) {\n      return await baseQuery.where(\n        and(\n          eq(stockEntries.tankId, tankId),\n          sql`${stockEntries.shiftType} = ${shiftType}`,\n          eq(stockEntries.shiftDate, shiftDate)\n        )\n      );\n    }\n\n    return await baseQuery.where(eq(stockEntries.tankId, tankId));\n  }\n\n  async createStockEntry(entry: InsertStockEntry): Promise<StockEntry> {\n    const [createdEntry] = await db.insert(stockEntries).values(entry).returning();\n    return createdEntry;\n  }\n\n  async updateStockEntry(id: string, entry: Partial<InsertStockEntry>): Promise<StockEntry> {\n    const [updatedEntry] = await db\n      .update(stockEntries)\n      .set({ ...entry, updatedAt: new Date() })\n      .where(eq(stockEntries.id, id))\n      .returning();\n    return updatedEntry;\n  }\n\n  async getTanksByRetailOutletIdWithProduct(retailOutletId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: tanks.id,\n        tankNumber: tanks.tankNumber,\n        capacity: tanks.capacity,\n        productName: products.name,\n        productId: products.id,\n        isActive: tanks.isActive,\n      })\n      .from(tanks)\n      .innerJoin(products, eq(tanks.productId, products.id))\n      .where(eq(tanks.retailOutletId, retailOutletId))\n      .orderBy(tanks.tankNumber);\n  }\n\n  async submitShiftData(managerId: string, shiftType: string, shiftDate: string): Promise<void> {\n    // Update or create shift record with submitted status\n    const existingShift = await db\n      .select()\n      .from(shifts)\n      .where(\n        and(\n          eq(shifts.managerId, managerId),\n          sql`${shifts.shiftType} = ${shiftType}`,\n          eq(shifts.shiftDate, shiftDate)\n        )\n      )\n      .limit(1);\n\n    if (existingShift.length > 0) {\n      await db\n        .update(shifts)\n        .set({ \n          status: \"submitted\", \n          submittedAt: new Date(),\n          updatedAt: new Date() \n        })\n        .where(eq(shifts.id, existingShift[0].id));\n    } else {\n      await db.insert(shifts).values({\n        managerId,\n        shiftType: shiftType as \"morning\" | \"evening\" | \"night\",\n        shiftDate,\n        status: \"submitted\",\n        submittedAt: new Date(),\n      });\n    }\n  }\n\n  async isShiftSubmitted(managerId: string, shiftType: string, shiftDate: string): Promise<boolean> {\n    const shift = await db\n      .select()\n      .from(shifts)\n      .where(\n        and(\n          eq(shifts.managerId, managerId),\n          sql`${shifts.shiftType} = ${shiftType}`,\n          eq(shifts.shiftDate, shiftDate),\n          eq(shifts.status, \"submitted\")\n        )\n      )\n      .limit(1);\n\n    return shift.length > 0;\n  }\n\n  // Shift operations for managers (mock implementation for now)\n  async getCurrentShift(managerId: string): Promise<any> {\n    // Mock implementation - return null for no active shift\n    return null;\n  }\n\n  async getLastProductRates(managerId: string, targetDate?: string, targetShiftType?: string): Promise<any[]> {\n    console.log(`Getting last rates for manager ${managerId}, date: ${targetDate}, shift: ${targetShiftType}`);\n    \n    // If specific date and shift are provided, get that shift\n    if (targetDate && targetShiftType) {\n      const [specificShift] = await db\n        .select()\n        .from(shifts)\n        .where(\n          and(\n            eq(shifts.managerId, managerId),\n            eq(shifts.shiftType, targetShiftType as any),\n            sql`DATE(created_at) = ${targetDate}`\n          )\n        )\n        .limit(1);\n\n      if (specificShift?.productRates) {\n        console.log(`Found specific shift rates:`, specificShift.productRates);\n        return specificShift.productRates as any[];\n      }\n    }\n\n    // If no specific match, try to find the same shift type from previous days\n    if (targetShiftType) {\n      const [recentShiftOfType] = await db\n        .select()\n        .from(shifts)\n        .where(\n          and(\n            eq(shifts.managerId, managerId),\n            eq(shifts.shiftType, targetShiftType as any)\n          )\n        )\n        .orderBy(desc(shifts.updatedAt))\n        .limit(1);\n\n      if (recentShiftOfType?.productRates) {\n        console.log(`Found recent shift of same type:`, recentShiftOfType.productRates);\n        return recentShiftOfType.productRates as any[];\n      }\n    }\n\n    // Finally, get the most recent shift for this manager regardless of type\n    const [latestShift] = await db\n      .select()\n      .from(shifts)\n      .where(eq(shifts.managerId, managerId))\n      .orderBy(desc(shifts.updatedAt))\n      .limit(1);\n\n    if (latestShift?.productRates) {\n      console.log(`Found latest shift rates:`, latestShift.productRates);\n      return latestShift.productRates as any[];\n    }\n\n    console.log(`No rates found for manager ${managerId}`);\n    return [];\n  }\n\n  async saveProductRates(managerId: string, shiftType: string, rates: any[], targetDate?: string): Promise<void> {\n    console.log(`Saving rates for manager ${managerId}, shift ${shiftType}, date ${targetDate}:`, rates);\n    \n    // Get manager's retail outlet\n    const manager = await this.getStaffById(managerId);\n    if (!manager) {\n      throw new Error(\"Manager not found\");\n    }\n\n    // Create or update shift record with product rates for specific date\n    const whereConditions = [\n      eq(shifts.managerId, managerId),\n      eq(shifts.shiftType, shiftType as any)\n    ];\n\n    if (targetDate) {\n      whereConditions.push(sql`DATE(created_at) = ${targetDate}`);\n    }\n\n    const [existingShift] = await db\n      .select()\n      .from(shifts)\n      .where(and(...whereConditions))\n      .limit(1);\n\n    if (existingShift) {\n      // Update existing shift with new rates\n      await db\n        .update(shifts)\n        .set({\n          productRates: rates,\n          updatedAt: new Date(),\n        })\n        .where(eq(shifts.id, existingShift.id));\n    } else {\n      // Create new shift record\n      await db\n        .insert(shifts)\n        .values({\n          managerId: managerId,\n          shiftType: shiftType as any,\n          productRates: rates,\n          status: 'not-started',\n        });\n    }\n  }\n\n  async startShift(managerId: string, shiftType: string, productRates: any[]): Promise<any> {\n    // Mock implementation - would create new shift record\n    return {\n      id: 'mock-shift-id',\n      managerId,\n      shiftType,\n      status: 'active',\n      startTime: new Date().toISOString(),\n      productRates,\n    };\n  }\n\n  // Nozzle Reading operations\n  async getNozzleReadings(retailOutletId: string, shiftType?: string, shiftDate?: string): Promise<any[]> {\n    const whereConditions = [eq(nozzleReadings.retailOutletId, retailOutletId)];\n    \n    if (shiftType) {\n      whereConditions.push(eq(nozzleReadings.shiftType, shiftType));\n    }\n    \n    if (shiftDate) {\n      whereConditions.push(eq(nozzleReadings.shiftDate, shiftDate));\n    }\n\n    console.log('[STORAGE] Query conditions:', {retailOutletId, shiftType, shiftDate});\n\n    const rawReadings = await db\n      .select()\n      .from(nozzleReadings)\n      .where(and(...whereConditions))\n      .orderBy(desc(nozzleReadings.createdAt));\n\n    console.log('[STORAGE] Raw readings found:', rawReadings.length);\n    if (rawReadings.length > 0) {\n      console.log('[STORAGE] First raw reading:', rawReadings[0]);\n    }\n\n    // Manually join with nozzle and attendant data\n    const enrichedReadings = [];\n    for (const reading of rawReadings) {\n      // Get nozzle info\n      const [nozzleData] = await db\n        .select({\n          id: nozzles.id,\n          nozzleNumber: nozzles.nozzleNumber,\n          productName: products.name,\n          productId: products.id,\n        })\n        .from(nozzles)\n        .leftJoin(tanks, eq(nozzles.tankId, tanks.id))\n        .leftJoin(products, eq(tanks.productId, products.id))\n        .where(eq(nozzles.id, reading.nozzleId))\n        .limit(1);\n\n      // Get attendant info\n      const [attendantData] = await db\n        .select({\n          id: staff.id,\n          name: staff.name,\n        })\n        .from(staff)\n        .where(eq(staff.id, reading.attendantId))\n        .limit(1);\n\n      enrichedReadings.push({\n        ...reading,\n        nozzle: nozzleData || null,\n        attendant: attendantData || null,\n      });\n    }\n\n    return enrichedReadings;\n  }\n\n  async getNozzleReadingsByAttendant(attendantId: string, shiftType?: string, shiftDate?: string): Promise<NozzleReading[]> {\n    const whereConditions = [eq(nozzleReadings.attendantId, attendantId)];\n    \n    if (shiftType) {\n      whereConditions.push(eq(nozzleReadings.shiftType, shiftType));\n    }\n    \n    if (shiftDate) {\n      whereConditions.push(eq(nozzleReadings.shiftDate, shiftDate));\n    }\n\n    return await db\n      .select()\n      .from(nozzleReadings)\n      .where(and(...whereConditions))\n      .orderBy(desc(nozzleReadings.createdAt));\n  }\n\n  async createNozzleReading(reading: InsertNozzleReading): Promise<NozzleReading> {\n    const [newReading] = await db\n      .insert(nozzleReadings)\n      .values(reading)\n      .returning();\n    return newReading;\n  }\n\n  async updateNozzleReading(id: string, reading: Partial<InsertNozzleReading>): Promise<NozzleReading> {\n    const [updatedReading] = await db\n      .update(nozzleReadings)\n      .set({\n        ...reading,\n        updatedAt: new Date(),\n      })\n      .where(eq(nozzleReadings.id, id))\n      .returning();\n    return updatedReading;\n  }\n\n  async getLastNozzleReading(nozzleId: string): Promise<NozzleReading | undefined> {\n    const [reading] = await db\n      .select()\n      .from(nozzleReadings)\n      .where(eq(nozzleReadings.nozzleId, nozzleId))\n      .orderBy(desc(nozzleReadings.createdAt))\n      .limit(1);\n    return reading;\n  }\n\n  async getNozzlesByRetailOutletId(retailOutletId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: nozzles.id,\n        dispensingUnitId: nozzles.dispensingUnitId,\n        tankId: nozzles.tankId,\n        nozzleNumber: nozzles.nozzleNumber,\n        calibrationValidUntil: nozzles.calibrationValidUntil,\n        isActive: nozzles.isActive,\n        createdAt: nozzles.createdAt,\n        updatedAt: nozzles.updatedAt,\n        dispensingUnitName: dispensingUnits.name,\n        tankNumber: tanks.tankNumber,\n        productName: products.name,\n        productId: products.id, // Add productId for rate matching\n      })\n      .from(nozzles)\n      .innerJoin(dispensingUnits, eq(nozzles.dispensingUnitId, dispensingUnits.id))\n      .innerJoin(tanks, eq(nozzles.tankId, tanks.id))\n      .innerJoin(products, eq(tanks.productId, products.id))\n      .where(eq(dispensingUnits.retailOutletId, retailOutletId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":28806},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - mandatory for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - mandatory for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"owner\"), // owner, manager, operator\n  language: varchar(\"language\").default(\"en\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Retail Outlets\nexport const retailOutlets = pgTable(\"retail_outlets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ownerId: varchar(\"owner_id\").references(() => users.id).notNull(),\n  name: text(\"name\").notNull(),\n  sapcode: varchar(\"sapcode\"),\n  oilCompany: varchar(\"oil_company\"),\n  address: text(\"address\"),\n  phoneNumber: varchar(\"phone_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Fuel Types\nexport const fuelTypeEnum = pgEnum(\"fuel_type\", [\"petrol\", \"diesel\", \"premium\"]);\n\n// Tanks\nexport const tanks = pgTable(\"tanks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailOutletId: varchar(\"retail_outlet_id\").references(() => retailOutlets.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  tankNumber: varchar(\"tank_number\").notNull(),\n  capacity: decimal(\"capacity\", { precision: 10, scale: 2 }).notNull(),\n  length: decimal(\"length\", { precision: 10, scale: 2 }).notNull(),\n  diameter: decimal(\"diameter\", { precision: 10, scale: 2 }).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Dispensing Units\nexport const dispensingUnits = pgTable(\"dispensing_units\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailOutletId: varchar(\"retail_outlet_id\").references(() => retailOutlets.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  numberOfNozzles: integer(\"number_of_nozzles\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Nozzles\nexport const nozzles = pgTable(\"nozzles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  dispensingUnitId: varchar(\"dispensing_unit_id\").references(() => dispensingUnits.id).notNull(),\n  tankId: varchar(\"tank_id\").references(() => tanks.id).notNull(),\n  nozzleNumber: integer(\"nozzle_number\").notNull(),\n  calibrationValidUntil: timestamp(\"calibration_valid_until\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Products\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailOutletId: varchar(\"retail_outlet_id\").references(() => retailOutlets.id).notNull(),\n  name: text(\"name\").notNull(),\n  pricePerLiter: decimal(\"price_per_liter\", { precision: 10, scale: 2 }).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Staff Members\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailOutletId: varchar(\"retail_outlet_id\").references(() => retailOutlets.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  phoneNumber: varchar(\"phone_number\"),\n  role: varchar(\"role\").notNull(), // manager, attendant\n  password: varchar(\"password\"), // Password for manager login (only for managers)\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payment Methods\nexport const paymentMethodEnum = pgEnum(\"payment_method\", [\"cash\", \"credit\", \"upi\", \"card\"]);\n\n// Nozzle Readings\nexport const nozzleReadings = pgTable(\"nozzle_readings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailOutletId: varchar(\"retail_outlet_id\").references(() => retailOutlets.id).notNull(),\n  nozzleId: varchar(\"nozzle_id\").references(() => nozzles.id).notNull(),\n  attendantId: varchar(\"attendant_id\").references(() => staff.id).notNull(),\n  shiftType: varchar(\"shift_type\").notNull(), // morning, evening, night\n  shiftDate: varchar(\"shift_date\").notNull(),\n  previousReading: decimal(\"previous_reading\", { precision: 10, scale: 2 }).notNull(),\n  currentReading: decimal(\"current_reading\", { precision: 10, scale: 2 }).notNull(),\n  testing: decimal(\"testing\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalSale: decimal(\"total_sale\", { precision: 10, scale: 2 }).notNull(),\n  cashSales: decimal(\"cash_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  creditSales: decimal(\"credit_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  upiSales: decimal(\"upi_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  cardSales: decimal(\"card_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Shift Sales\nexport const shiftSales = pgTable(\"shift_sales\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailOutletId: varchar(\"retail_outlet_id\").references(() => retailOutlets.id).notNull(),\n  staffId: varchar(\"staff_id\").references(() => staff.id).notNull(),\n  shiftDate: timestamp(\"shift_date\").notNull(),\n  shiftType: varchar(\"shift_type\").notNull(), // morning, afternoon, night\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\").notNull(),\n  cashSales: decimal(\"cash_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  creditSales: decimal(\"credit_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  upiSales: decimal(\"upi_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  cardSales: decimal(\"card_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalSales: decimal(\"total_sales\", { precision: 10, scale: 2 }).default(\"0\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  retailOutlets: many(retailOutlets),\n  staff: many(staff),\n}));\n\nexport const retailOutletsRelations = relations(retailOutlets, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [retailOutlets.ownerId],\n    references: [users.id],\n  }),\n  products: many(products),\n  tanks: many(tanks),\n  dispensingUnits: many(dispensingUnits),\n  staff: many(staff),\n  shiftSales: many(shiftSales),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  retailOutlet: one(retailOutlets, {\n    fields: [products.retailOutletId],\n    references: [retailOutlets.id],\n  }),\n  tanks: many(tanks),\n}));\n\nexport const tanksRelations = relations(tanks, ({ one, many }) => ({\n  retailOutlet: one(retailOutlets, {\n    fields: [tanks.retailOutletId],\n    references: [retailOutlets.id],\n  }),\n  product: one(products, {\n    fields: [tanks.productId],\n    references: [products.id],\n  }),\n  dispensingUnits: many(dispensingUnits),\n  stockEntries: many(stockEntries),\n}));\n\nexport const dispensingUnitsRelations = relations(dispensingUnits, ({ one, many }) => ({\n  retailOutlet: one(retailOutlets, {\n    fields: [dispensingUnits.retailOutletId],\n    references: [retailOutlets.id],\n  }),\n  nozzles: many(nozzles),\n}));\n\nexport const nozzlesRelations = relations(nozzles, ({ one, many }) => ({\n  dispensingUnit: one(dispensingUnits, {\n    fields: [nozzles.dispensingUnitId],\n    references: [dispensingUnits.id],\n  }),\n  tank: one(tanks, {\n    fields: [nozzles.tankId],\n    references: [tanks.id],\n  }),\n  readings: many(nozzleReadings),\n}));\n\nexport const staffRelations = relations(staff, ({ one, many }) => ({\n  retailOutlet: one(retailOutlets, {\n    fields: [staff.retailOutletId],\n    references: [retailOutlets.id],\n  }),\n  user: one(users, {\n    fields: [staff.userId],\n    references: [users.id],\n  }),\n  shiftSales: many(shiftSales),\n  nozzleReadings: many(nozzleReadings),\n}));\n\nexport const nozzleReadingsRelations = relations(nozzleReadings, ({ one }) => ({\n  retailOutlet: one(retailOutlets, {\n    fields: [nozzleReadings.retailOutletId],\n    references: [retailOutlets.id],\n  }),\n  nozzle: one(nozzles, {\n    fields: [nozzleReadings.nozzleId],\n    references: [nozzles.id],\n  }),\n  attendant: one(staff, {\n    fields: [nozzleReadings.attendantId],\n    references: [staff.id],\n  }),\n}));\n\nexport const shiftSalesRelations = relations(shiftSales, ({ one }) => ({\n  retailOutlet: one(retailOutlets, {\n    fields: [shiftSales.retailOutletId],\n    references: [retailOutlets.id],\n  }),\n  staff: one(staff, {\n    fields: [shiftSales.staffId],\n    references: [staff.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertRetailOutletSchema = createInsertSchema(retailOutlets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTankSchema = createInsertSchema(tanks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  capacity: z.union([z.string(), z.number()]).transform(val => String(val)),\n  length: z.union([z.string(), z.number()]).transform(val => String(val)),\n  diameter: z.union([z.string(), z.number()]).transform(val => String(val)),\n});\n\nexport const insertDispensingUnitSchema = createInsertSchema(dispensingUnits).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNozzleSchema = createInsertSchema(nozzles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNozzleReadingSchema = createInsertSchema(nozzleReadings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  previousReading: z.union([z.string(), z.number()]).transform(val => String(val)),\n  currentReading: z.union([z.string(), z.number()]).transform(val => String(val)),\n  testing: z.union([z.string(), z.number()]).transform(val => String(val)),\n  totalSale: z.union([z.string(), z.number()]).transform(val => String(val)),\n  cashSales: z.union([z.string(), z.number()]).transform(val => String(val)),\n  creditSales: z.union([z.string(), z.number()]).transform(val => String(val)),\n  upiSales: z.union([z.string(), z.number()]).transform(val => String(val)),\n  cardSales: z.union([z.string(), z.number()]).transform(val => String(val)),\n});\n\nexport const insertShiftSalesSchema = createInsertSchema(shiftSales).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Shifts table for tracking work shifts and product rates\nexport const shifts = pgTable(\"shifts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  managerId: varchar(\"manager_id\").notNull(),\n  shiftType: varchar(\"shift_type\", { enum: [\"morning\", \"evening\", \"night\"] }).notNull(),\n  shiftDate: varchar(\"shift_date\"), // YYYY-MM-DD format - nullable for backward compatibility\n  startTime: timestamp(\"start_time\"),\n  endTime: timestamp(\"end_time\"),\n  status: varchar(\"status\", { enum: [\"not-started\", \"active\", \"completed\", \"submitted\"] }).default(\"not-started\").notNull(),\n  productRates: jsonb(\"product_rates\").$type<{productId: string; productName: string; rate: number; observedDensity?: number; observedTemperature?: number; densityAt15C?: number}[]>().default([]),\n  submittedAt: timestamp(\"submitted_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Stock Entries for tracking opening stock, receipts, and invoice values per tank\nexport const stockEntries = pgTable(\"stock_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  retailOutletId: varchar(\"retail_outlet_id\").references(() => retailOutlets.id).notNull(),\n  tankId: varchar(\"tank_id\").references(() => tanks.id).notNull(),\n  managerId: varchar(\"manager_id\").references(() => staff.id).notNull(),\n  shiftType: varchar(\"shift_type\", { enum: [\"morning\", \"evening\", \"night\"] }).notNull(),\n  shiftDate: varchar(\"shift_date\").notNull(), // YYYY-MM-DD format\n  openingStock: decimal(\"opening_stock\", { precision: 10, scale: 2 }).notNull(), // in liters\n  receipt: decimal(\"receipt\", { precision: 10, scale: 2 }).notNull(), // liters received\n  invoiceValue: decimal(\"invoice_value\", { precision: 10, scale: 2 }).notNull(), // total invoice amount\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Stock entry relations\nexport const stockEntriesRelations = relations(stockEntries, ({ one }) => ({\n  retailOutlet: one(retailOutlets, {\n    fields: [stockEntries.retailOutletId],\n    references: [retailOutlets.id],\n  }),\n  tank: one(tanks, {\n    fields: [stockEntries.tankId],\n    references: [tanks.id],\n  }),\n  manager: one(staff, {\n    fields: [stockEntries.managerId],\n    references: [staff.id],\n  }),\n}));\n\n// Insert schema for stock entries\nexport const insertStockEntrySchema = createInsertSchema(stockEntries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  openingStock: z.union([z.string(), z.number()]).transform(val => String(val)),\n  receipt: z.union([z.string(), z.number()]).transform(val => String(val)),\n  invoiceValue: z.union([z.string(), z.number()]).transform(val => String(val)),\n});\n\nexport type Shift = typeof shifts.$inferSelect;\nexport type InsertShift = typeof shifts.$inferInsert;\nexport type InsertRetailOutlet = z.infer<typeof insertRetailOutletSchema>;\nexport type RetailOutlet = typeof retailOutlets.$inferSelect;\nexport type InsertTank = z.infer<typeof insertTankSchema>;\nexport type Tank = typeof tanks.$inferSelect & { currentStock?: string; productName?: string; };\nexport type InsertDispensingUnit = z.infer<typeof insertDispensingUnitSchema>;\nexport type DispensingUnit = typeof dispensingUnits.$inferSelect;\nexport type InsertNozzle = z.infer<typeof insertNozzleSchema>;\nexport type Nozzle = typeof nozzles.$inferSelect;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type Staff = typeof staff.$inferSelect;\nexport type InsertShiftSales = z.infer<typeof insertShiftSalesSchema>;\nexport type ShiftSales = typeof shiftSales.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertNozzleReading = z.infer<typeof insertNozzleReadingSchema>;\nexport type NozzleReading = typeof nozzleReadings.$inferSelect;\nexport type InsertStockEntry = z.infer<typeof insertStockEntrySchema>;\nexport type StockEntry = typeof stockEntries.$inferSelect;\n","size_bytes":15704},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useManagerAuth } from \"@/hooks/useManagerAuth\";\nimport { ShiftProvider } from \"@/contexts/ShiftContext\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BottomNavigation } from \"@/components/ui/bottom-navigation\";\nimport { SideMenu } from \"@/components/ui/side-menu\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./lib/i18n\";\n\n// Pages\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport DataEntry from \"@/pages/data-entry\";\nimport StaffManagement from \"@/pages/staff-management\";\nimport Reports from \"@/pages/reports\";\nimport Setup from \"@/pages/setup\";\nimport NotFound from \"@/pages/not-found\";\nimport RODetailsPage from \"@/pages/ro-details\";\nimport ProductsPage from \"@/pages/products\";\nimport TankManagementPage from \"@/pages/tank-management\";\nimport DispensingUnitsPage from \"@/pages/dispensing-units\";\n\nimport SettingsPage from \"@/pages/settings\";\nimport ShiftPage from \"@/pages/shift\";\nimport ReadingsPage from \"@/pages/readings\";\nimport StockPage from \"@/pages/stock\";\nimport DensityPage from \"@/pages/density\";\nimport SummaryPage from \"@/pages/summary\";\n\nfunction MainApp() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { manager, isManagerAuthenticated, isLoading: managerLoading } = useManagerAuth();\n  const { t, i18n } = useTranslation();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [showSetup, setShowSetup] = useState(false);\n  const [currentPage, setCurrentPage] = useState<string | null>(null);\n  \n  // Combined authentication state\n  const isAnyUserAuthenticated = isAuthenticated || isManagerAuthenticated;\n  const isLoadingAuth = isLoading || managerLoading;\n  const currentUser = user || manager;\n\n  // Check if user has retail outlet setup - only for dealers\n  const { data: retailOutlet, isLoading: outletLoading } = useQuery({\n    queryKey: [\"/api/retail-outlet\"],\n    enabled: isAuthenticated && !!user, // Only dealers need retail outlet\n    retry: false,\n  });\n\n  // Set language from user preference or localStorage\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem('language') || currentUser?.language || 'en';\n    i18n.changeLanguage(savedLanguage);\n  }, [currentUser, i18n]);\n\n  // Show setup if dealer is authenticated but no retail outlet\n  useEffect(() => {\n    if (isAuthenticated && !outletLoading && !retailOutlet) {\n      setShowSetup(true);\n    } else {\n      setShowSetup(false);\n    }\n  }, [isAuthenticated, outletLoading, retailOutlet]);\n\n  const handleSetupComplete = () => {\n    setShowSetup(false);\n  };\n\n  const handleMenuItemClick = (item: string) => {\n    console.log(\"Menu item clicked:\", item);\n    setCurrentPage(item);\n  };\n\n  const handleBackToMain = () => {\n    setCurrentPage(null);\n  };\n\n  if (isLoadingAuth || (isAuthenticated && outletLoading)) {\n    return (\n      <div className=\"min-h-screen bg-surface flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">{t(\"common.loading\")}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAnyUserAuthenticated) {\n    // Show login screen directly for all non-authenticated users\n    return <Login />;\n  }\n\n  // Managers skip setup and go directly to their allowed functions\n  if (isManagerAuthenticated && !isAuthenticated) {\n    const renderManagerContent = () => {\n      // Default to shift tab if no page selected\n      const managerPage = currentPage || \"shift\";\n      \n      switch (managerPage) {\n        case \"shift\":\n          return <ShiftPage />;\n        case \"readings\":\n          return <ReadingsPage />;\n        case \"stock\":\n          return <StockPage />;\n        case \"summary\":\n          return <SummaryPage />;\n        case \"dataEntry\":\n          return <DataEntry />;\n        case \"reports\":\n          return <Reports />;\n        default:\n          return <ShiftPage />;\n      }\n    };\n\n    return (\n      <div className=\"min-h-screen bg-surface\">\n        <div className=\"fixed top-4 left-4 z-50\">\n          <SideMenu />\n        </div>\n        {renderManagerContent()}\n        <BottomNavigation\n          currentPage={currentPage || \"shift\"}\n          onNavigate={handleMenuItemClick}\n          userType=\"manager\"\n        />\n      </div>\n    );\n  }\n\n  if (showSetup) {\n    return <Setup onComplete={handleSetupComplete} />;\n  }\n\n  const renderActiveContent = () => {\n    // If a menu page is selected, show that instead of tab content\n    if (currentPage) {\n      switch (currentPage) {\n        case \"roDetails\":\n          return <RODetailsPage onBack={handleBackToMain} />;\n        case \"products\":\n          return <ProductsPage onBack={handleBackToMain} />;\n        case \"tankManagement\":\n          return <TankManagementPage onBack={handleBackToMain} />;\n        case \"dispensingUnits\":\n          return <DispensingUnitsPage onBack={handleBackToMain} />;\n\n        case \"settings\":\n          return <SettingsPage onBack={handleBackToMain} />;\n        case \"shift\":\n          return <ShiftPage onBack={handleBackToMain} />;\n        case \"readings\":\n          return <ReadingsPage onBack={handleBackToMain} />;\n        case \"stock\":\n          return <StockPage onBack={handleBackToMain} />;\n        case \"summary\":\n          return <SummaryPage onBack={handleBackToMain} />;\n        default:\n          return <Dashboard />;\n      }\n    }\n\n    // Otherwise show tab-based content\n    switch (activeTab) {\n      case \"dashboard\":\n        return <Dashboard />;\n      case \"dataEntry\":\n        return <DataEntry onNavigate={handleMenuItemClick} />;\n      case \"staff\":\n        return <StaffManagement />;\n      case \"reports\":\n        return <Reports />;\n      default:\n        return <Dashboard />;\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white min-h-screen relative\">\n      {/* Header */}\n      <header className=\"bg-primary text-white p-4 flex items-center justify-between shadow-md\">\n        <SideMenu onMenuItemClick={handleMenuItemClick} />\n        <div className=\"flex flex-col items-center\">\n          <h1 className=\"text-lg font-medium\" data-testid=\"app-header-title\">\n            {t(\"app.name\")}\n          </h1>\n          <span className=\"text-xs opacity-90\" data-testid=\"app-header-subtitle\">\n            {(retailOutlet as any)?.name || \"Petrol Pump\"}\n          </span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <button className=\"text-sm bg-white/20 px-2 py-1 rounded\" data-testid=\"language-indicator\">\n            <span>{i18n.language?.toUpperCase() || \"EN\"}</span>\n          </button>\n          <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n            {(user as any)?.profileImageUrl ? (\n              <img \n                src={(user as any).profileImageUrl} \n                alt=\"Profile\" \n                className=\"w-8 h-8 rounded-full object-cover\"\n                data-testid=\"user-avatar\"\n              />\n            ) : (\n              <div className=\"text-sm\" data-testid=\"user-avatar-fallback\">\n                {((user as any)?.firstName || (user as any)?.email || \"U\").charAt(0).toUpperCase()}\n              </div>\n            )}\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"min-h-screen bg-surface\">\n        {renderActiveContent()}\n      </main>\n\n      {/* Bottom Navigation - hide when viewing menu pages */}\n      {!currentPage && (\n        <BottomNavigation currentPage={activeTab} onNavigate={setActiveTab} userType=\"dealer\" />\n      )}\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={MainApp} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ShiftProvider>\n          <Toaster />\n          <Router />\n        </ShiftProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":8418},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(37, 92%, 50%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 84%, 60%);\n  --surface: hsl(210, 40%, 98%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 84%, 60%);\n  --surface: hsl(240, 10%, 3.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom utility classes for Material Design colors */\n@layer utilities {\n  .bg-primary {\n    background-color: var(--primary);\n  }\n  \n  .bg-secondary {\n    background-color: var(--secondary);\n  }\n  \n  .bg-surface {\n    background-color: var(--surface);\n  }\n  \n  .bg-success {\n    background-color: var(--success);\n  }\n  \n  .bg-warning {\n    background-color: var(--warning);\n  }\n  \n  .bg-error {\n    background-color: var(--error);\n  }\n  \n  .text-primary {\n    color: var(--primary);\n  }\n  \n  .text-secondary {\n    color: var(--secondary);\n  }\n  \n  .text-success {\n    color: var(--success);\n  }\n  \n  .text-warning {\n    color: var(--warning);\n  }\n  \n  .text-error {\n    color: var(--error);\n  }\n}\n","size_bytes":2615},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchOnReconnect: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":517},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/i18n.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport enTranslations from '../locales/en.json';\nimport hiTranslations from '../locales/hi.json';\n\nconst resources = {\n  en: {\n    translation: enTranslations,\n  },\n  hi: {\n    translation: hiTranslations,\n  },\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng: 'en',\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","size_bytes":468},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string = \"GET\",\n  data?: unknown | undefined,\n): Promise<any> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1393},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { TankCard } from \"@/components/ui/tank-card\";\nimport { ShiftCard } from \"@/components/ui/shift-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useTranslation } from \"react-i18next\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle } from \"lucide-react\";\nimport type { Tank, ShiftSales } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { t } = useTranslation();\n\n  const { data: tanks = [], isLoading: tanksLoading, error: tanksError } = useQuery<Tank[]>({\n    queryKey: [\"/api/tanks\"],\n  });\n\n  const { data: shiftSales = [], isLoading: salesLoading, error: salesError } = useQuery<ShiftSales[]>({\n    queryKey: [\"/api/shift-sales\"],\n  });\n\n  const { data: staff = [] } = useQuery({\n    queryKey: [\"/api/staff\"],\n  });\n\n  const getStaffName = (staffId: string) => {\n    const staffMember = staff.find((s: any) => s.id === staffId);\n    return staffMember?.name || \"Unknown\";\n  };\n\n  if (tanksError || salesError) {\n    return (\n      <div className=\"p-4\">\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Failed to load dashboard data. Please try again.\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      <Tabs defaultValue=\"inventory\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2 mb-4\">\n          <TabsTrigger value=\"inventory\" data-testid=\"tab-inventory\">\n            {t(\"dashboard.tankInventory\")}\n          </TabsTrigger>\n          <TabsTrigger value=\"sales\" data-testid=\"tab-sales\">\n            {t(\"dashboard.shiftSales\")}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"inventory\" className=\"space-y-3\">\n          {tanksLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <Skeleton key={i} className=\"h-32 w-full\" />\n              ))}\n            </div>\n          ) : tanks.length === 0 ? (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                No tanks configured. Please add tanks from the menu.\n              </AlertDescription>\n            </Alert>\n          ) : (\n            tanks.map((tank) => (\n              <TankCard key={tank.id} tank={tank} />\n            ))\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"sales\" className=\"space-y-3\">\n          {salesLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <Skeleton key={i} className=\"h-32 w-full\" />\n              ))}\n            </div>\n          ) : shiftSales.length === 0 ? (\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                No shift sales data available. Add sales data from the Data Entry tab.\n              </AlertDescription>\n            </Alert>\n          ) : (\n            shiftSales.map((shift) => (\n              <ShiftCard \n                key={shift.id} \n                shift={shift} \n                staffName={getStaffName(shift.staffId)}\n              />\n            ))\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":3450},"client/src/pages/data-entry.tsx":{"content":"import { Clock, Gauge, Package, Warehouse } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface DataEntryProps {\n  onNavigate?: (page: string) => void;\n}\n\nexport default function DataEntry({ onNavigate }: DataEntryProps) {\n  const dataEntryCards = [\n    {\n      id: \"shift\",\n      title: \"Shift Management\",\n      description: \"Manage shift rates and density measurements\",\n      icon: Clock,\n      color: \"bg-blue-50 border-blue-200 hover:bg-blue-100\",\n      iconColor: \"text-blue-600\",\n    },\n    {\n      id: \"readings\",\n      title: \"Tank Readings\",\n      description: \"Record tank level measurements and readings\",\n      icon: Gauge,\n      color: \"bg-green-50 border-green-200 hover:bg-green-100\",\n      iconColor: \"text-green-600\",\n    },\n    {\n      id: \"stock\",\n      title: \"Stock Management\",\n      description: \"Track fuel stock levels and deliveries\",\n      icon: Package,\n      color: \"bg-orange-50 border-orange-200 hover:bg-orange-100\",\n      iconColor: \"text-orange-600\",\n    },\n    {\n      id: \"inventory\",\n      title: \"Inventory Reports\",\n      description: \"View inventory levels and analytics\",\n      icon: Warehouse,\n      color: \"bg-purple-50 border-purple-200 hover:bg-purple-100\",\n      iconColor: \"text-purple-600\",\n    },\n  ];\n\n  const handleCardClick = (cardId: string) => {\n    if (onNavigate) {\n      onNavigate(cardId);\n    }\n  };\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <h1 className=\"text-2xl font-bold\" data-testid=\"data-entry-title\">\n        Data Entry\n      </h1>\n      \n      <p className=\"text-gray-600 mb-6\">\n        Select a category to enter or manage operational data\n      </p>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {dataEntryCards.map((card) => {\n          const Icon = card.icon;\n          return (\n            <Card\n              key={card.id}\n              className={`cursor-pointer transition-all duration-200 ${card.color}`}\n              onClick={() => handleCardClick(card.id)}\n              data-testid={`data-entry-card-${card.id}`}\n            >\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Icon className={`h-8 w-8 ${card.iconColor}`} />\n                  <div>\n                    <CardTitle className=\"text-lg\">{card.title}</CardTitle>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600\">{card.description}</p>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":2665},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTranslation } from \"react-i18next\";\nimport { Fuel } from \"lucide-react\";\n\nexport default function Landing() {\n  const { t } = useTranslation();\n\n  const handleLogin = () => {\n    window.location.href = \"/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-surface flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md mx-auto shadow-lg\">\n        <CardHeader className=\"text-center pb-6\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"bg-primary/10 p-3 rounded-full\">\n              <Fuel className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-primary\" data-testid=\"app-title\">\n            {t(\"app.name\")}\n          </CardTitle>\n          <p className=\"text-gray-600 text-sm\" data-testid=\"app-tagline\">\n            {t(\"app.tagline\")}\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <h2 className=\"text-lg font-medium mb-2\">Welcome to FuelFlow</h2>\n              <p className=\"text-gray-600 text-sm mb-6\">\n                Manage your petrol pump operations on the go. Track inventory, sales, and staff efficiently.\n              </p>\n            </div>\n            \n            <Button \n              onClick={handleLogin} \n              className=\"w-full bg-primary hover:bg-primary/90 text-white py-3\"\n              data-testid=\"login-button\"\n            >\n              Get Started\n            </Button>\n            \n            <div className=\"text-center\">\n              <p className=\"text-xs text-gray-500\">\n                For petrol pump owners and managers\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1961},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function Reports() {\n  const { t } = useTranslation();\n\n  const { data: stats, isLoading, error } = useQuery({\n    queryKey: [\"/api/sales-stats\"],\n  });\n\n  const formatCurrency = (amount: number) => {\n    return `₹${amount.toLocaleString()}`;\n  };\n\n  const calculatePercentages = (breakdown: any) => {\n    const total = breakdown.cash + breakdown.credit + breakdown.upi + breakdown.card;\n    if (total === 0) return { cash: 0, credit: 0, upi: 0, card: 0 };\n    \n    return {\n      cash: (breakdown.cash / total) * 100,\n      credit: (breakdown.credit / total) * 100,\n      upi: (breakdown.upi / total) * 100,\n      card: (breakdown.card / total) * 100,\n    };\n  };\n\n  if (error) {\n    return (\n      <div className=\"p-4\">\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Failed to load reports data. Please try again.\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 pb-20 space-y-4\">\n        <Skeleton className=\"h-32 w-full\" />\n        <Skeleton className=\"h-48 w-full\" />\n      </div>\n    );\n  }\n\n  const percentages = stats ? calculatePercentages(stats.paymentMethodBreakdown) : null;\n\n  return (\n    <div className=\"p-4 pb-20\">\n      <h3 className=\"font-medium text-lg mb-4\" data-testid=\"reports-title\">\n        {t(\"reports.title\")}\n      </h3>\n\n      <div className=\"space-y-4\">\n        <Card className=\"shadow-sm border border-gray-200\">\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium\" data-testid=\"sales-overview-title\">\n              {t(\"reports.salesOverview\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4 text-center\">\n              <div>\n                <p className=\"text-2xl font-bold text-primary\" data-testid=\"weekly-sales\">\n                  {stats ? formatCurrency(stats.weeklySales) : \"₹0\"}\n                </p>\n                <p className=\"text-sm text-gray-600\">{t(\"reports.thisWeek\")}</p>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-secondary\" data-testid=\"monthly-sales\">\n                  {stats ? formatCurrency(stats.monthlySales) : \"₹0\"}\n                </p>\n                <p className=\"text-sm text-gray-600\">{t(\"reports.thisMonth\")}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-sm border border-gray-200\">\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium\" data-testid=\"payment-methods-title\">\n              {t(\"reports.paymentMethods\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!stats || !percentages ? (\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  No sales data available for payment method breakdown.\n                </AlertDescription>\n              </Alert>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">{t(\"common.upi\")}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={percentages.upi} className=\"w-20 h-2\" data-testid=\"progress-upi\" />\n                    <span className=\"text-sm font-medium w-10 text-right\" data-testid=\"percentage-upi\">\n                      {percentages.upi.toFixed(0)}%\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">{t(\"common.cash\")}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={percentages.cash} className=\"w-20 h-2\" data-testid=\"progress-cash\" />\n                    <span className=\"text-sm font-medium w-10 text-right\" data-testid=\"percentage-cash\">\n                      {percentages.cash.toFixed(0)}%\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">{t(\"common.card\")}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={percentages.card} className=\"w-20 h-2\" data-testid=\"progress-card\" />\n                    <span className=\"text-sm font-medium w-10 text-right\" data-testid=\"percentage-card\">\n                      {percentages.card.toFixed(0)}%\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">{t(\"common.credit\")}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={percentages.credit} className=\"w-20 h-2\" data-testid=\"progress-credit\" />\n                    <span className=\"text-sm font-medium w-10 text-right\" data-testid=\"percentage-credit\">\n                      {percentages.credit.toFixed(0)}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5913},"client/src/pages/setup.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Fuel } from \"lucide-react\";\n\nconst setupSchema = z.object({\n  name: z.string().min(1, \"RO Name is required\"),\n  sapcode: z.string().optional(),\n  oilCompany: z.string().optional(),\n  address: z.string().optional(),\n  phoneNumber: z.string().optional(),\n});\n\ntype SetupForm = z.infer<typeof setupSchema>;\n\ninterface SetupProps {\n  onComplete: () => void;\n}\n\nexport default function Setup({ onComplete }: SetupProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<SetupForm>({\n    resolver: zodResolver(setupSchema),\n    defaultValues: {\n      name: \"\",\n      sapcode: \"\",\n      oilCompany: \"\",\n      address: \"\",\n      phoneNumber: \"\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: SetupForm) => {\n      await apiRequest(\"POST\", \"/api/retail-outlet\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: \"Retail outlet setup completed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/retail-outlet\"] });\n      onComplete();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t(\"common.error\"),\n        description: \"Failed to setup retail outlet\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SetupForm) => {\n    mutation.mutate(data);\n  };\n\n  const oilCompanies = [\n    \"Indian Oil Corporation\",\n    \"Bharat Petroleum\",\n    \"Hindustan Petroleum\",\n    \"Shell\",\n    \"BP\",\n    \"Total\",\n    \"Reliance Petroleum\",\n    \"Essar Oil\",\n    \"Other\",\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-surface flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md mx-auto shadow-lg\">\n        <CardHeader className=\"text-center pb-6\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"bg-primary/10 p-3 rounded-full\">\n              <Fuel className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-xl font-bold\" data-testid=\"setup-title\">\n            {t(\"setup.welcome\")}\n          </CardTitle>\n          <p className=\"text-gray-600 text-sm\" data-testid=\"setup-subtitle\">\n            {t(\"setup.setupRO\")}\n          </p>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t(\"setup.roName\")}</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter RO name\" {...field} data-testid=\"input-ro-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"sapcode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t(\"setup.sapcode\")}</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter SAP code\" {...field} data-testid=\"input-sapcode\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"oilCompany\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t(\"setup.oilCompany\")}</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-oil-company\">\n                          <SelectValue placeholder=\"Select oil company\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {oilCompanies.map((company) => (\n                          <SelectItem key={company} value={company}>\n                            {company}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t(\"setup.address\")}</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Enter full address\" \n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"input-address\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phoneNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t(\"setup.phoneNumber\")}</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter phone number\" {...field} data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-primary text-white py-3 hover:bg-primary/90\"\n                disabled={mutation.isPending}\n                data-testid=\"button-complete-setup\"\n              >\n                {mutation.isPending ? t(\"common.loading\") : t(\"setup.complete\")}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7198},"client/src/pages/staff-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { StaffCard } from \"@/components/ui/staff-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Plus, AlertCircle } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Staff } from \"@shared/schema\";\n\nconst staffSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  phoneNumber: z.string().optional(),\n  role: z.string().min(1, \"Role is required\"),\n  password: z.string().optional(),\n}).refine((data) => {\n  // If role is manager, require phoneNumber and password\n  if (data.role === \"manager\") {\n    return data.phoneNumber && data.phoneNumber.length > 0 && data.password && data.password.length > 0;\n  }\n  return true;\n}, {\n  message: \"Phone number and Password are required for managers\",\n  path: [\"phoneNumber\"],\n});\n\ntype StaffForm = z.infer<typeof staffSchema>;\n\nexport default function StaffManagement() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingStaff, setEditingStaff] = useState<Staff | null>(null);\n\n  const { data: staff = [], isLoading, error } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  const form = useForm<StaffForm>({\n    resolver: zodResolver(staffSchema),\n    defaultValues: {\n      name: \"\",\n      phoneNumber: \"\",\n      role: \"\",\n      password: \"\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: StaffForm) => {\n      return apiRequest(\"/api/staff\", \"POST\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: \"Staff member added successfully\",\n      });\n      form.reset();\n      setIsDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t(\"common.error\"),\n        description: \"Failed to add staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: StaffForm }) => {\n      return apiRequest(`/api/staff/${id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: \"Staff member updated successfully\",\n      });\n      form.reset();\n      setIsDialogOpen(false);\n      setEditingStaff(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t(\"common.error\"),\n        description: \"Failed to update staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      // Soft delete by setting isActive to false\n      return apiRequest(`/api/staff/${id}`, \"PUT\", { isActive: false });\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: \"Staff member removed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: t(\"common.error\"),\n        description: \"Failed to remove staff member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (staff: Staff) => {\n    setEditingStaff(staff);\n    form.reset({\n      name: staff.name,\n      phoneNumber: staff.phoneNumber || \"\",\n      role: staff.role,\n      password: staff.password || \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (staff: Staff) => {\n    if (confirm(`Are you sure you want to remove ${staff.name}?`)) {\n      deleteMutation.mutate(staff.id);\n    }\n  };\n\n  const handleAddNew = () => {\n    setEditingStaff(null);\n    form.reset({\n      name: \"\",\n      phoneNumber: \"\",\n      role: \"\",\n      password: \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = (data: StaffForm) => {\n    if (editingStaff) {\n      updateMutation.mutate({ id: editingStaff.id, data });\n    } else {\n      mutation.mutate(data);\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"p-4\">\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Failed to load staff data. Please try again.\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"font-medium text-lg\" data-testid=\"staff-title\">\n          {t(\"staff.title\")}\n        </h3>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"bg-primary text-white px-4 py-2 text-sm\" \n              data-testid=\"button-add-staff\"\n              onClick={handleAddNew}\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              {t(\"staff.addStaff\")}\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingStaff ? \"Edit Staff Member\" : t(\"staff.addStaff\")}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter staff name\" {...field} data-testid=\"input-staff-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        Phone Number \n                        {form.watch(\"role\") === \"manager\" && (\n                          <span className=\"text-blue-600 text-xs ml-1\">(Login ID)</span>\n                        )}\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter phone number\" {...field} data-testid=\"input-staff-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-staff-role\">\n                            <SelectValue placeholder=\"Select role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"manager\">Manager</SelectItem>\n                          <SelectItem value=\"attendant\">Attendant</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Password field - only show for managers */}\n                {form.watch(\"role\") === \"manager\" && (\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"password\" \n                            placeholder=\"Enter password for manager\" \n                            {...field} \n                            data-testid=\"input-staff-password\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel-staff\"\n                  >\n                    {t(\"common.cancel\")}\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={mutation.isPending}\n                    className=\"flex-1 bg-primary text-white\"\n                    data-testid=\"button-save-staff\"\n                  >\n                    {mutation.isPending ? t(\"common.loading\") : t(\"common.save\")}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"space-y-3\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <Skeleton key={i} className=\"h-20 w-full\" />\n            ))}\n          </div>\n        ) : staff.length === 0 ? (\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              No staff members added yet. Click \"Add Staff\" to get started.\n            </AlertDescription>\n          </Alert>\n        ) : (\n          staff\n            .filter((member) => member.isActive) // Only show active staff\n            .map((member) => (\n              <StaffCard \n                key={member.id} \n                staffMember={member}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n              />\n            ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11936},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/bottom-navigation.tsx":{"content":"import { Clock, Gauge, Package, Droplets, Warehouse, BarChart3, Users, ClipboardList, Home } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BottomNavigationProps {\n  currentPage: string | null;\n  onNavigate: (page: string) => void;\n  userType?: \"dealer\" | \"manager\";\n}\n\nexport function BottomNavigation({ currentPage, onNavigate, userType = \"dealer\" }: BottomNavigationProps) {\n  const managerNavItems = [\n    {\n      id: \"shift\",\n      label: \"Shift\",\n      icon: Clock,\n    },\n    {\n      id: \"readings\",\n      label: \"Readings\",\n      icon: Gauge,\n    },\n    {\n      id: \"stock\",\n      label: \"Stock\",\n      icon: Package,\n    },\n    {\n      id: \"summary\",\n      label: \"Summary\",\n      icon: BarChart3,\n    },\n  ];\n\n  const dealerNavItems = [\n    {\n      id: \"dashboard\",\n      label: \"Dashboard\",\n      icon: Home,\n    },\n    {\n      id: \"dataEntry\",\n      label: \"Data Entry\",\n      icon: ClipboardList,\n    },\n    {\n      id: \"staff\",\n      label: \"Staff\",\n      icon: Users,\n    },\n    {\n      id: \"reports\",\n      label: \"Reports\",\n      icon: BarChart3,\n    },\n  ];\n\n  const navItems = userType === \"manager\" ? managerNavItems : dealerNavItems;\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 safe-area-padding-bottom z-50\">\n      <div className=\"grid grid-cols-4 h-16\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = currentPage === item.id;\n          \n          return (\n            <button\n              key={item.id}\n              onClick={() => onNavigate(item.id)}\n              className={cn(\n                \"flex flex-col items-center justify-center space-y-1 transition-colors\",\n                isActive \n                  ? \"text-primary bg-primary/5\" \n                  : \"text-gray-600 hover:text-primary hover:bg-gray-50\"\n              )}\n              data-testid={`nav-${item.id}`}\n            >\n              <Icon className=\"h-5 w-5\" />\n              <span className=\"text-xs font-medium truncate\">{item.label}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":2138},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/shift-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useTranslation } from \"react-i18next\";\nimport type { ShiftSales } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface ShiftCardProps {\n  shift: ShiftSales;\n  staffName?: string;\n}\n\nexport function ShiftCard({ shift, staffName }: ShiftCardProps) {\n  const { t } = useTranslation();\n  \n  const totalSales = parseFloat(shift.totalSales || \"0\");\n  const cashSales = parseFloat(shift.cashSales || \"0\");\n  const creditSales = parseFloat(shift.creditSales || \"0\");\n  const upiSales = parseFloat(shift.upiSales || \"0\");\n  const cardSales = parseFloat(shift.cardSales || \"0\");\n\n  const formatCurrency = (amount: number) => {\n    return `₹${amount.toLocaleString()}`;\n  };\n\n  const formatShiftTime = (startTime: string | Date, endTime: string | Date) => {\n    const start = new Date(startTime);\n    const end = new Date(endTime);\n    return `${format(start, 'h:mm a')} - ${format(end, 'h:mm a')}`;\n  };\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\" data-testid={`shift-card-${shift.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div>\n            <span className=\"font-medium text-sm\" data-testid={`shift-time-${shift.id}`}>\n              {format(new Date(shift.shiftDate), 'MMM dd, yyyy')} • {formatShiftTime(shift.startTime, shift.endTime)}\n            </span>\n            {staffName && (\n              <p className=\"text-xs text-gray-500\" data-testid={`shift-manager-${shift.id}`}>\n                {t(\"dataEntry.manager\")}: {staffName}\n              </p>\n            )}\n          </div>\n          <span className=\"text-lg font-bold text-primary\" data-testid={`shift-total-${shift.id}`}>\n            {formatCurrency(totalSales)}\n          </span>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-3 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">{t(\"common.cash\")}</span>\n            <span data-testid={`shift-cash-${shift.id}`}>{formatCurrency(cashSales)}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">{t(\"common.credit\")}</span>\n            <span data-testid={`shift-credit-${shift.id}`}>{formatCurrency(creditSales)}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">{t(\"common.upi\")}</span>\n            <span data-testid={`shift-upi-${shift.id}`}>{formatCurrency(upiSales)}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">{t(\"common.card\")}</span>\n            <span data-testid={`shift-card-${shift.id}`}>{formatCurrency(cardSales)}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2870},"client/src/components/ui/side-menu.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Menu, \n  X, \n  Fuel, \n  Package,\n  Truck, \n  Gauge as GaugeIcon, \n  Users, \n  Languages, \n  Settings,\n  User,\n  LogOut\n} from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\n\ninterface SideMenuProps {\n  onMenuItemClick?: (item: string) => void;\n  currentUser?: any;\n  userRole?: \"dealer\" | \"manager\";\n}\n\nexport function SideMenu({ onMenuItemClick, currentUser, userRole = \"dealer\" }: SideMenuProps) {\n  const { t, i18n } = useTranslation();\n  const { user } = useAuth();\n  const [open, setOpen] = useState(false);\n  \n  const displayUser = currentUser || user;\n\n  const handleLanguageChange = (language: string) => {\n    i18n.changeLanguage(language);\n    localStorage.setItem('language', language);\n  };\n\n  // Define menu items based on user role\n  const dealerMenuItems = [\n    {\n      id: \"roDetails\",\n      label: t(\"menu.roDetails\"),\n      icon: Fuel,\n    },\n    {\n      id: \"products\",\n      label: \"Products\",\n      icon: Package,\n    },\n    {\n      id: \"tankManagement\",\n      label: t(\"menu.tankManagement\"),\n      icon: Truck,\n    },\n    {\n      id: \"dispensingUnits\",\n      label: t(\"menu.dispensingUnits\"),\n      icon: GaugeIcon,\n    },\n    {\n      id: \"settings\",\n      label: t(\"menu.settings\"),\n      icon: Settings,\n    },\n  ];\n\n  const managerMenuItems = [\n    {\n      id: \"dataEntry\",\n      label: \"Data Entry\",\n      icon: Package,\n    },\n    {\n      id: \"reports\",\n      label: \"Reports\",\n      icon: Users,\n    },\n  ];\n\n  const menuItems = userRole === \"manager\" ? managerMenuItems : dealerMenuItems;\n\n  const handleMenuItemClick = (itemId: string) => {\n    onMenuItemClick?.(itemId);\n    setOpen(false);\n  };\n\n  const handleLogout = async () => {\n    if (userRole === \"manager\") {\n      try {\n        // Manager logout - clear session via API\n        await fetch(\"/api/manager/logout\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" }\n        });\n      } catch (error) {\n        console.error(\"Logout error:\", error);\n      }\n      window.location.href = \"/login\";\n    } else {\n      // Dealer logout via Replit Auth\n      window.location.href = \"/api/logout\";\n    }\n  };\n\n  return (\n    <Sheet open={open} onOpenChange={setOpen}>\n      <SheetTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"icon\" \n          className=\"bg-primary text-white border-primary hover:bg-primary/90 hover:text-white shadow-lg\" \n          data-testid=\"menu-trigger\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n      </SheetTrigger>\n      <SheetContent side=\"left\" className=\"w-80 p-0\">\n        <div className=\"bg-primary text-white p-4\">\n          <SheetHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <SheetTitle className=\"text-white font-medium\" data-testid=\"user-name\">\n                  {displayUser?.name || \n                   (displayUser?.firstName && displayUser?.lastName \n                     ? `${displayUser.firstName} ${displayUser.lastName}` \n                     : displayUser?.email || \"User\")}\n                </SheetTitle>\n                <p className=\"text-sm opacity-90\" data-testid=\"user-role\">\n                  {userRole === \"manager\" ? \"Manager\" : \"Owner\"}\n                </p>\n              </div>\n            </div>\n          </SheetHeader>\n        </div>\n        \n        <nav className=\"p-4\">\n          <div className=\"space-y-2\">\n            {menuItems.map((item) => {\n              const Icon = item.icon;\n              return (\n                <button\n                  key={item.id}\n                  onClick={() => handleMenuItemClick(item.id)}\n                  className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-100 transition-colors w-full text-left\"\n                  data-testid={`menu-${item.id}`}\n                >\n                  <Icon className=\"text-secondary w-5 h-5\" />\n                  <span>{item.label}</span>\n                </button>\n              );\n            })}\n            \n            <div className=\"pt-4 border-t\">\n              <button\n                onClick={handleLogout}\n                className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-100 transition-colors w-full text-left text-red-600\"\n                data-testid=\"menu-logout\"\n              >\n                <LogOut className=\"w-5 h-5\" />\n                <span>{t(\"menu.logout\")}</span>\n              </button>\n            </div>\n            \n            <div className=\"pt-4 border-t\">\n              <div className=\"flex items-center space-x-3 p-3\">\n                <Languages className=\"text-secondary w-5 h-5\" />\n                <div className=\"flex-1\">\n                  <span className=\"text-sm font-medium\">{t(\"menu.languageSettings\")}</span>\n                  <Select\n                    value={i18n.language}\n                    onValueChange={handleLanguageChange}\n                  >\n                    <SelectTrigger className=\"mt-1\" data-testid=\"language-selector\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"en\">English</SelectItem>\n                      <SelectItem value=\"hi\">हिन्दी</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n          </div>\n        </nav>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":5835},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/staff-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { MoreVertical, User, Edit2, Trash2, Eye, EyeOff } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Staff } from \"@shared/schema\";\n\ninterface StaffCardProps {\n  staffMember: Staff;\n  onEdit?: (staff: Staff) => void;\n  onDelete?: (staff: Staff) => void;\n}\n\nexport function StaffCard({ staffMember, onEdit, onDelete }: StaffCardProps) {\n  const { t } = useTranslation();\n  const [showPassword, setShowPassword] = useState(false);\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\" data-testid={`staff-card-${staffMember.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n              <User className=\"text-primary h-5 w-5\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-sm\" data-testid={`staff-name-${staffMember.id}`}>\n                {staffMember.name}\n              </p>\n              <p className=\"text-xs text-gray-500\" data-testid={`staff-role-${staffMember.id}`}>\n                {staffMember.role}\n              </p>\n              {staffMember.phoneNumber && (\n                <p className=\"text-xs text-gray-500\" data-testid={`staff-phone-${staffMember.id}`}>\n                  {staffMember.phoneNumber}\n                </p>\n              )}\n              {staffMember.role === \"manager\" && staffMember.phoneNumber && (\n                <div className=\"space-y-1\">\n                  <p className=\"text-xs text-blue-600 font-medium\" data-testid={`staff-login-${staffMember.id}`}>\n                    Login ID: {staffMember.phoneNumber}\n                  </p>\n                  {staffMember.password && (\n                    <div className=\"flex items-center space-x-2\">\n                      <p className=\"text-xs text-blue-600 font-medium\" data-testid={`staff-password-${staffMember.id}`}>\n                        Password: {showPassword ? staffMember.password : \"••••••••\"}\n                      </p>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-4 w-4 p-0\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        data-testid={`toggle-password-${staffMember.id}`}\n                      >\n                        {showPassword ? <EyeOff className=\"h-3 w-3\" /> : <Eye className=\"h-3 w-3\" />}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge \n              variant={staffMember.isActive ? \"default\" : \"secondary\"}\n              className=\"text-xs\"\n              data-testid={`staff-status-${staffMember.id}`}\n            >\n              {staffMember.isActive ? t(\"staff.active\") : t(\"staff.inactive\")}\n            </Badge>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"text-gray-400 h-8 w-8\"\n                  data-testid={`staff-menu-${staffMember.id}`}\n                >\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem \n                  onClick={() => onEdit?.(staffMember)}\n                  data-testid={`edit-staff-${staffMember.id}`}\n                >\n                  <Edit2 className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={() => onDelete?.(staffMember)}\n                  className=\"text-red-600\"\n                  data-testid={`delete-staff-${staffMember.id}`}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Remove\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4590},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/tank-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { useTranslation } from \"react-i18next\";\nimport type { Tank } from \"@shared/schema\";\n\ninterface TankCardProps {\n  tank: Tank;\n}\n\nexport function TankCard({ tank }: TankCardProps) {\n  const { t } = useTranslation();\n  \n  const currentStock = parseFloat(tank.currentStock || \"0\");\n  const capacity = parseFloat(tank.capacity);\n  const fillPercentage = (currentStock / capacity) * 100;\n  \n  const getStatusColor = () => {\n    if (fillPercentage > 50) return \"bg-success text-success\";\n    if (fillPercentage > 20) return \"bg-warning text-warning\";\n    return \"bg-error text-error\";\n  };\n  \n  const getStatusText = () => {\n    if (fillPercentage > 50) return t(\"dashboard.normal\");\n    if (fillPercentage > 20) return t(\"dashboard.lowStock\");\n    return t(\"dashboard.empty\");\n  };\n\n  const getProgressColor = () => {\n    if (fillPercentage > 50) return \"bg-success\";\n    if (fillPercentage > 20) return \"bg-warning\";\n    return \"bg-error\";\n  };\n\n  const fuelTypeDisplay = {\n    petrol: t(\"common.petrol\"),\n    diesel: t(\"common.diesel\"),\n    premium: t(\"common.premium\"),\n  };\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\" data-testid={`tank-card-${tank.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <div className={cn(\"w-3 h-3 rounded-full\", getStatusColor().split(\" \")[0])} />\n            <span className=\"font-medium text-sm\" data-testid={`tank-fuel-type-${tank.id}`}>\n              {fuelTypeDisplay[tank.fuelType as keyof typeof fuelTypeDisplay] || tank.fuelType}\n            </span>\n            <span className=\"text-xs text-gray-500\" data-testid={`tank-number-${tank.id}`}>\n              {tank.tankNumber}\n            </span>\n          </div>\n          <Badge \n            variant=\"secondary\" \n            className={cn(\"text-xs\", getStatusColor().split(\" \")[1])}\n            data-testid={`tank-status-${tank.id}`}\n          >\n            {getStatusText()}\n          </Badge>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">{t(\"dashboard.currentStock\")}</span>\n            <span className=\"font-medium\" data-testid={`tank-current-stock-${tank.id}`}>\n              {currentStock.toLocaleString()} L\n            </span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">{t(\"dashboard.capacity\")}</span>\n            <span data-testid={`tank-capacity-${tank.id}`}>\n              {capacity.toLocaleString()} L\n            </span>\n          </div>\n          \n          <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n            <div \n              className={cn(\"h-2 rounded-full\", getProgressColor())} \n              style={{ width: `${Math.min(fillPercentage, 100)}%` }}\n              data-testid={`tank-progress-${tank.id}`}\n            />\n          </div>\n          \n          <div className=\"text-xs text-gray-500 text-right\" data-testid={`tank-percentage-${tank.id}`}>\n            {fillPercentage.toFixed(1)}% {t(\"dashboard.filled\")}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3398},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/manager-access.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, Users, Edit3, Trash2, UserCheck, UserX } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\ninterface ManagerAccessPageProps {\n  onBack: () => void;\n}\n\nconst managerSchema = z.object({\n  name: z.string().min(1, \"Manager name is required\"),\n  email: z.string().email(\"Valid email is required\").optional().or(z.literal(\"\")),\n  phoneNumber: z.string().min(10, \"Valid phone number is required\"),\n});\n\ntype ManagerForm = z.infer<typeof managerSchema>;\n\nexport default function ManagerAccessPage({ onBack }: ManagerAccessPageProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingManager, setEditingManager] = useState<any>(null);\n\n  const { data: staff = [], isLoading } = useQuery({\n    queryKey: [\"/api/staff\"],\n  });\n\n  // Filter staff to get only managers\n  const managers = staff.filter((member: any) => member.role === \"manager\");\n\n  const form = useForm<ManagerForm>({\n    resolver: zodResolver(managerSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: ManagerForm) => {\n      const staffData = {\n        name: data.name,\n        phoneNumber: data.phoneNumber,\n        role: \"manager\"\n      };\n      return apiRequest(\"/api/staff\", \"POST\", staffData);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"managerAccess.createSuccess\"),\n      });\n      setIsDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: ManagerForm }) => {\n      const staffData = {\n        name: data.name,\n        phoneNumber: data.phoneNumber,\n        role: \"manager\"\n      };\n      return apiRequest(`/api/staff/${id}`, \"PUT\", staffData);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"managerAccess.updateSuccess\"),\n      });\n      setIsDialogOpen(false);\n      setEditingManager(null);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleStatusMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: string; isActive: boolean }) => {\n      return apiRequest(`/api/staff/${id}`, \"PUT\", { isActive });\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"managerAccess.statusUpdateSuccess\"),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/staff/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"managerAccess.deleteSuccess\"),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: ManagerForm) => {\n    if (editingManager) {\n      updateMutation.mutate({ id: editingManager.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (manager: any) => {\n    setEditingManager(manager);\n    form.reset({\n      name: manager.name,\n      email: manager.email || \"\",\n      phoneNumber: manager.phoneNumber,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleAddNew = () => {\n    setEditingManager(null);\n    form.reset({\n      name: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleToggleStatus = (manager: any) => {\n    toggleStatusMutation.mutate({\n      id: manager.id,\n      isActive: !manager.isActive,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onBack}\n            className=\"mr-3\"\n            data-testid=\"back-button\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n            {t(\"menu.managerAccess\")}\n          </h1>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleAddNew} data-testid=\"add-manager-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"managerAccess.addManager\")}\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingManager ? t(\"managerAccess.editManager\") : t(\"managerAccess.addManager\")}\n              </DialogTitle>\n              <DialogDescription>\n                {editingManager ? t(\"managerAccess.editDescription\") : t(\"managerAccess.addDescription\")}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">{t(\"managerAccess.managerName\")}</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                  data-testid=\"input-manager-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">{t(\"managerAccess.email\")}</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  data-testid=\"input-manager-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phoneNumber\">{t(\"managerAccess.phone\")}</Label>\n                <Input\n                  id=\"phoneNumber\"\n                  {...form.register(\"phoneNumber\")}\n                  data-testid=\"input-manager-phone\"\n                />\n                {form.formState.errors.phoneNumber && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.phoneNumber.message}</p>\n                )}\n              </div>\n\n\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"save-manager-button\"\n                >\n                  {(createMutation.isPending || updateMutation.isPending) ? \n                    t(\"common.saving\") : t(\"common.save\")}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                  className=\"flex-1\"\n                  data-testid=\"cancel-manager-button\"\n                >\n                  {t(\"common.cancel\")}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Managers List */}\n      {managers.length === 0 ? (\n        <Card className=\"text-center py-8\">\n          <CardContent>\n            <Users className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">{t(\"managerAccess.noManagers\")}</h3>\n            <p className=\"text-gray-600 mb-4\">{t(\"managerAccess.noManagersDescription\")}</p>\n            <Button onClick={handleAddNew} data-testid=\"add-first-manager-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"managerAccess.addFirstManager\")}\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {managers.map((manager: any) => (\n            <Card key={manager.id} data-testid={`manager-card-${manager.id}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"p-2 rounded-lg bg-primary/10\">\n                      {manager.isActive ? (\n                        <UserCheck className=\"h-5 w-5 text-green-600\" />\n                      ) : (\n                        <UserX className=\"h-5 w-5 text-gray-400\" />\n                      )}\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\" data-testid={`manager-name-${manager.id}`}>\n                        {manager.name}\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">{manager.phoneNumber}</p>\n                      <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium mt-1 ${\n                        manager.isActive \n                          ? \"text-green-700 bg-green-100\" \n                          : \"text-gray-700 bg-gray-100\"\n                      }`}>\n                        {manager.isActive ? t(\"managerAccess.active\") : t(\"managerAccess.inactive\")}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col space-y-2\">\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleEdit(manager)}\n                        data-testid={`edit-manager-${manager.id}`}\n                      >\n                        <Edit3 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => deleteMutation.mutate(manager.id)}\n                        disabled={deleteMutation.isPending}\n                        data-testid={`delete-manager-${manager.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    <Button\n                      variant={manager.isActive ? \"destructive\" : \"default\"}\n                      size=\"sm\"\n                      onClick={() => handleToggleStatus(manager)}\n                      disabled={toggleStatusMutation.isPending}\n                      data-testid={`toggle-status-${manager.id}`}\n                    >\n                      {manager.isActive ? t(\"managerAccess.deactivate\") : t(\"managerAccess.activate\")}\n                    </Button>\n                  </div>\n                </div>\n\n\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12951},"client/src/pages/inventory.tsx":{"content":"import { ArrowLeft, Warehouse, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport ShiftDateDisplay from \"@/components/ShiftDateDisplay\";\nimport { useShiftContext } from \"@/contexts/ShiftContext\";\n\ninterface InventoryPageProps {\n  onBack?: () => void;\n}\n\nexport default function InventoryPage({ onBack }: InventoryPageProps) {\n  const { selectedShiftType, selectedDate } = useShiftContext();\n  return (\n    <div className=\"min-h-screen bg-surface pb-20\">\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"flex items-center space-x-3\">\n          {onBack && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onBack}\n              className=\"text-white hover:bg-white/20\"\n              data-testid=\"back-button\"\n            >\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          )}\n          <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n            Inventory Overview\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <ShiftDateDisplay\n          selectedShiftType={selectedShiftType}\n          selectedDate={selectedDate}\n        />\n\n        <div className=\"grid grid-cols-1 gap-4 mb-6\">\n          <div className=\"bg-white rounded-lg shadow-sm p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Warehouse className=\"h-8 w-8 text-primary\" />\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-600\">Total Inventory</h3>\n                  <p className=\"text-xl font-semibold\" data-testid=\"total-inventory\">0 L</p>\n                </div>\n              </div>\n              <TrendingUp className=\"h-6 w-6 text-green-500\" />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Tank Status</h2>\n          <div className=\"space-y-4\">\n            <div className=\"text-center text-gray-500 py-8\" data-testid=\"no-tanks\">\n              No tanks configured\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Recent Movements</h2>\n          <div className=\"space-y-3\">\n            <div className=\"text-center text-gray-500 py-8\" data-testid=\"no-movements\">\n              No recent inventory movements\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2631},"client/src/pages/readings.tsx":{"content":"import { ArrowLeft, Plus, User, Fuel, Calculator, DollarSign, CreditCard, Smartphone, Banknote } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ShiftDateDisplay from \"@/components/ShiftDateDisplay\";\nimport { useShiftContext } from \"@/contexts/ShiftContext\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState, useEffect } from \"react\";\n\ninterface ReadingsPageProps {\n  onBack?: () => void;\n}\n\ninterface Attendant {\n  id: string;\n  name: string;\n  phoneNumber: string;\n  role: string;\n}\n\ninterface Nozzle {\n  id: string;\n  nozzleNumber: number;\n  dispensingUnitName: string;\n  tankNumber: string;\n  productName: string;\n  productId: string;\n  calibrationValidUntil: string;\n}\n\ninterface Reading {\n  id: string;\n  nozzleId: string;\n  attendantId: string;\n  previousReading: string; // This will be renamed to openingReading in display\n  currentReading: string;  // This will be renamed to closingReading in display\n  testing: string;\n  totalSale: string;\n  cashSales: string;\n  creditSales: string;\n  upiSales: string;\n  cardSales: string;\n  shiftType: string;\n  shiftDate: string;\n}\n\ninterface LastReading {\n  id: string;\n  currentReading: string;\n}\n\nexport default function ReadingsPage({ onBack }: ReadingsPageProps) {\n  const { selectedShiftType, selectedDate } = useShiftContext();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedAttendantId, setSelectedAttendantId] = useState<string>(\"\");\n  const [selectedNozzleId, setSelectedNozzleId] = useState<string>(\"\");\n  const [formData, setFormData] = useState({\n    previousReading: \"\", // Opening reading\n    currentReading: \"\",  // Closing reading\n    testing: \"0\",\n    cashSales: \"0\",\n    creditSales: \"0\",\n    upiSales: \"0\",\n    cardSales: \"0\"\n  });\n\n  // Fetch attendants\n  const { data: attendants = [], isLoading: loadingAttendants } = useQuery<Attendant[]>({\n    queryKey: [\"/api/manager/attendants\"],\n    retry: false,\n  });\n\n  // Fetch nozzles\n  const { data: nozzles = [], isLoading: loadingNozzles } = useQuery<Nozzle[]>({\n    queryKey: [\"/api/manager/nozzles\"],\n    retry: false,\n  });\n\n  // Fetch readings for current shift and date\n  const { data: readings = [], isLoading: loadingReadings } = useQuery<Reading[]>({\n    queryKey: [\"/api/manager/readings\", selectedShiftType, selectedDate],\n    retry: false,\n  });\n\n  // Fetch last reading for selected nozzle\n  const { data: lastReading } = useQuery<LastReading | null>({\n    queryKey: [\"/api/manager/nozzles\", selectedNozzleId, \"last-reading\"],\n    enabled: !!selectedNozzleId,\n    retry: false,\n    staleTime: 0, // Always refetch to avoid cache issues\n  });\n\n  // Fetch current rates for calculations\n  const { data: currentRates = [] } = useQuery<any[]>({\n    queryKey: [`/api/shifts/last-rates?date=${selectedDate}&shiftType=${selectedShiftType}`],\n    retry: false,\n    staleTime: 0, // Always refetch to get latest rates\n  });\n\n  // Create reading mutation\n  const createReading = useMutation({\n    mutationFn: async (readingData: any) => {\n      return await apiRequest(\"/api/manager/readings\", \"POST\", readingData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\", \n        description: \"Reading recorded successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager/readings\"] });\n      // Keep form populated and nozzle selected for editing\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record reading\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update reading mutation for editing existing readings\n  const updateReading = useMutation({\n    mutationFn: async ({ id, readingData }: { id: string, readingData: any }) => {\n      return await apiRequest(`/api/manager/readings/${id}`, \"PATCH\", readingData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Reading updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager/readings\"] });\n      // Keep form populated and nozzle selected for continued editing\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to update reading\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAttendantChange = (attendantId: string) => {\n    setSelectedAttendantId(attendantId);\n    setSelectedNozzleId(\"\");\n  };\n\n  const handleNozzleChange = (nozzleId: string) => {\n    setSelectedNozzleId(nozzleId);\n  };\n\n  // Check if reading exists for this nozzle and shift\n  const existingReading = readings.find(r => r.nozzleId === selectedNozzleId);\n\n  // Effect to handle previous reading population when lastReading data changes\n  useEffect(() => {\n    if (selectedNozzleId && lastReading !== undefined && !existingReading) {\n      // Only populate from lastReading if we're not editing an existing reading\n      if (lastReading && lastReading.currentReading) {\n        setFormData(prev => ({\n          ...prev,\n          previousReading: lastReading.currentReading\n        }));\n      } else {\n        setFormData(prev => ({\n          ...prev,\n          previousReading: \"\"\n        }));\n      }\n    }\n  }, [lastReading, selectedNozzleId, existingReading]);\n  \n  // Effect to populate form with existing reading data when editing\n  useEffect(() => {\n    if (existingReading && selectedNozzleId === existingReading.nozzleId) {\n      setFormData({\n        previousReading: existingReading.previousReading,\n        currentReading: existingReading.currentReading,\n        testing: existingReading.testing,\n        cashSales: existingReading.cashSales,\n        creditSales: existingReading.creditSales,\n        upiSales: existingReading.upiSales,\n        cardSales: existingReading.cardSales,\n      });\n      setSelectedAttendantId(existingReading.attendantId);\n    } else if (selectedNozzleId && !existingReading) {\n      // Reset form for new reading\n      setFormData({\n        previousReading: \"\",\n        currentReading: \"\",\n        testing: \"0\",\n        cashSales: \"0\",\n        creditSales: \"0\",\n        upiSales: \"0\",\n        cardSales: \"0\"\n      });\n    }\n  }, [existingReading, selectedNozzleId]);\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const calculateTotalSale = () => {\n    const cash = parseFloat(formData.cashSales) || 0;\n    const credit = parseFloat(formData.creditSales) || 0;\n    const upi = parseFloat(formData.upiSales) || 0;\n    const card = parseFloat(formData.cardSales) || 0;\n    return (cash + credit + upi + card).toFixed(2);\n  };\n\n  const calculateSalesProceeds = () => {\n    if (!selectedNozzleId || !formData.currentReading || !formData.previousReading) {\n      return { calculated: \"0.00\", actual: \"0.00\", shortage: \"0.00\", liters: \"0.00\", rate: \"0.00\" };\n    }\n\n    const selectedNozzle = nozzles.find(n => n.id === selectedNozzleId);\n    if (!selectedNozzle) return { calculated: \"0.00\", actual: \"0.00\", shortage: \"0.00\", liters: \"0.00\", rate: \"0.00\" };\n\n    // Debug: log to see what we have\n    console.log(\"Current rates available:\", currentRates);\n    console.log(\"Selected nozzle:\", selectedNozzle);\n    console.log(\"Selected nozzle product ID:\", selectedNozzle?.productId);\n    \n    // Find the rate for this product from current rates\n    const productRate = (currentRates as any[]).find((rate: any) => rate.productId === selectedNozzle?.productId);\n    console.log(\"Found product rate:\", productRate);\n    \n    // If no rate found, return zeros but still calculate other values\n    const rate = productRate ? parseFloat(productRate.rate) || 0 : 0;\n    console.log(\"Final rate:\", rate);\n\n    const currentReading = parseFloat(formData.currentReading) || 0;\n    const previousReading = parseFloat(formData.previousReading) || 0;\n    const testing = parseFloat(formData.testing) || 0;\n    \n    // Calculate liters sold\n    const litersSold = currentReading - previousReading - testing;\n    \n    // Calculate expected sales proceeds (only if rate is available)\n    const calculatedProceeds = rate > 0 ? litersSold * rate : 0;\n    \n    // Calculate actual sales proceeds\n    const actualProceeds = parseFloat(calculateTotalSale());\n    \n    // Calculate shortage\n    const shortage = calculatedProceeds - actualProceeds;\n\n    return {\n      calculated: calculatedProceeds.toFixed(2),\n      actual: actualProceeds.toFixed(2),\n      shortage: shortage.toFixed(2),\n      liters: litersSold.toFixed(2),\n      rate: rate.toFixed(2)\n    };\n  };\n\n  // Check if next shift has data to determine if current shift is editable\n  const getNextShift = (current: string) => {\n    const shifts = ['morning', 'evening', 'night'];\n    const currentIndex = shifts.indexOf(current);\n    return currentIndex < shifts.length - 1 ? shifts[currentIndex + 1] : null;\n  };\n  \n  const nextShift = getNextShift(selectedShiftType);\n  const { data: nextShiftReadings = [] } = useQuery<Reading[]>({\n    queryKey: [\"/api/manager/readings\", nextShift, selectedDate],\n    enabled: !!nextShift,\n    retry: false,\n  });\n  \n  const isEditable = !nextShift || nextShiftReadings.length === 0;\n\n  const handleSubmit = () => {\n    if (!selectedAttendantId || !selectedNozzleId || !formData.currentReading || !formData.previousReading) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill all required fields including previous reading\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const totalSale = calculateTotalSale();\n    \n    const readingData = {\n      nozzleId: selectedNozzleId,\n      attendantId: selectedAttendantId,\n      shiftType: selectedShiftType,\n      shiftDate: selectedDate,\n      previousReading: formData.previousReading,\n      currentReading: formData.currentReading,\n      testing: formData.testing,\n      totalSale: totalSale,\n      cashSales: formData.cashSales,\n      creditSales: formData.creditSales,\n      upiSales: formData.upiSales,\n      cardSales: formData.cardSales,\n    };\n\n    if (existingReading) {\n      updateReading.mutate({ id: existingReading.id, readingData });\n    } else {\n      createReading.mutate(readingData);\n    }\n  };\n\n  const selectedNozzle = nozzles.find((n: Nozzle) => n.id === selectedNozzleId);\n  const selectedAttendant = attendants.find((a: Attendant) => a.id === selectedAttendantId);\n\n  return (\n    <div className=\"min-h-screen bg-surface pb-20\">\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {onBack && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onBack}\n                className=\"text-white hover:bg-white/20\"\n                data-testid=\"back-button\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n            )}\n            <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n              Nozzle Readings\n            </h1>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-4\">\n        <ShiftDateDisplay\n          selectedShiftType={selectedShiftType}\n          selectedDate={selectedDate}\n        />\n\n        {/* Attendant Selection */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Select Attendant\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Select value={selectedAttendantId} onValueChange={handleAttendantChange} data-testid=\"select-attendant\">\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose attendant...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {attendants.map((attendant: Attendant) => (\n                  <SelectItem key={attendant.id} value={attendant.id}>\n                    {attendant.name} ({attendant.phoneNumber})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </CardContent>\n        </Card>\n\n        {/* Nozzle Selection */}\n        {selectedAttendantId && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Fuel className=\"h-5 w-5\" />\n                Select Nozzle\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Select value={selectedNozzleId} onValueChange={handleNozzleChange} data-testid=\"select-nozzle\">\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose nozzle...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {nozzles.map((nozzle: Nozzle) => {\n                    const hasReading = readings.find(r => r.nozzleId === nozzle.id);\n                    return (\n                      <SelectItem key={nozzle.id} value={nozzle.id}>\n                        Nozzle {nozzle.nozzleNumber} - {nozzle.dispensingUnitName} - {nozzle.productName} (Tank {nozzle.tankNumber})\n                        {hasReading && <span className=\"ml-2 text-green-600\">✓ Recorded</span>}\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Reading Form */}\n        {selectedNozzleId && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calculator className=\"h-5 w-5\" />\n                {existingReading ? \"Edit Reading\" : \"Record Reading\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\" data-testid=\"reading-form\">\n              {selectedNozzle && (\n                <div className=\"p-3 bg-gray-50 rounded-lg\">\n                  <p className=\"font-medium\">Nozzle {selectedNozzle.nozzleNumber}</p>\n                  <p className=\"text-sm text-gray-600\">{selectedNozzle.dispensingUnitName} - {selectedNozzle.productName}</p>\n                  <p className=\"text-sm text-gray-600\">Tank {selectedNozzle.tankNumber}</p>\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"opening-reading\">Opening Reading</Label>\n                  {lastReading && lastReading.currentReading ? (\n                    <Input\n                      id=\"opening-reading\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.previousReading}\n                      data-testid=\"input-opening-reading\"\n                      readOnly\n                      className=\"bg-gray-100\"\n                      placeholder=\"From previous shift\"\n                    />\n                  ) : (\n                    <Input\n                      id=\"opening-reading\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.previousReading}\n                      onChange={(e) => handleInputChange(\"previousReading\", e.target.value)}\n                      data-testid=\"input-opening-reading\"\n                      placeholder=\"Enter opening reading\"\n                      className=\"border-orange-300 focus:border-orange-500\"\n                    />\n                  )}\n                  {!lastReading && (\n                    <p className=\"text-xs text-orange-600 mt-1\">\n                      No previous reading found. Please enter the starting reading.\n                    </p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"closing-reading\">Closing Reading *</Label>\n                  <Input\n                    id=\"closing-reading\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.currentReading}\n                    onChange={(e) => handleInputChange(\"currentReading\", e.target.value)}\n                    data-testid=\"input-closing-reading\"\n                    placeholder=\"Enter closing reading\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"testing\">Testing (Liters)</Label>\n                <Input\n                  id=\"testing\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.testing}\n                  onChange={(e) => handleInputChange(\"testing\", e.target.value)}\n                  data-testid=\"input-testing\"\n                  placeholder=\"0\"\n                />\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4\" />\n                  Sales Proceeds\n                </h4>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"cash-sales\" className=\"flex items-center gap-2\">\n                      <Banknote className=\"h-4 w-4\" />\n                      Cash Sales\n                    </Label>\n                    <Input\n                      id=\"cash-sales\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.cashSales}\n                      onChange={(e) => handleInputChange(\"cashSales\", e.target.value)}\n                      data-testid=\"input-cash-sales\"\n                      placeholder=\"0\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"credit-sales\" className=\"flex items-center gap-2\">\n                      <CreditCard className=\"h-4 w-4\" />\n                      Credit Sales\n                    </Label>\n                    <Input\n                      id=\"credit-sales\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.creditSales}\n                      onChange={(e) => handleInputChange(\"creditSales\", e.target.value)}\n                      data-testid=\"input-credit-sales\"\n                      placeholder=\"0\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"upi-sales\" className=\"flex items-center gap-2\">\n                      <Smartphone className=\"h-4 w-4\" />\n                      UPI Sales\n                    </Label>\n                    <Input\n                      id=\"upi-sales\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.upiSales}\n                      onChange={(e) => handleInputChange(\"upiSales\", e.target.value)}\n                      data-testid=\"input-upi-sales\"\n                      placeholder=\"0\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"card-sales\" className=\"flex items-center gap-2\">\n                      <CreditCard className=\"h-4 w-4\" />\n                      Card Sales\n                    </Label>\n                    <Input\n                      id=\"card-sales\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.cardSales}\n                      onChange={(e) => handleInputChange(\"cardSales\", e.target.value)}\n                      data-testid=\"input-card-sales\"\n                      placeholder=\"0\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"p-3 bg-blue-50 rounded-lg\">\n                  <p className=\"font-medium text-blue-900\">\n                    Total Sales: ₹{calculateTotalSale()}\n                  </p>\n                </div>\n              </div>\n\n              {/* Sales Calculation Display */}\n              {formData.currentReading && formData.previousReading && (() => {\n                const calculations = calculateSalesProceeds();\n                return (\n                  <div className=\"space-y-3 p-4 bg-gray-50 rounded-lg border\">\n                    <h4 className=\"font-medium text-gray-800 flex items-center gap-2\">\n                      <Calculator className=\"h-4 w-4\" />\n                      Sales Calculation\n                    </h4>\n                    \n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div className=\"space-y-1\">\n                        <p className=\"text-gray-600\">Liters Sold</p>\n                        <p className=\"font-medium\">{calculations.liters}L</p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <p className=\"text-gray-600\">Rate per Liter</p>\n                        <p className=\"font-medium\">₹{calculations.rate}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2 border-t pt-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-gray-600\">Calculated Sales Proceeds:</span>\n                        <span className=\"font-medium text-green-700\">₹{calculations.calculated}</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-gray-600\">Actual Sales Proceeds:</span>\n                        <span className=\"font-medium text-blue-700\">₹{calculations.actual}</span>\n                      </div>\n                      <div className=\"flex justify-between items-center border-t pt-2\">\n                        <span className=\"text-gray-600 font-medium\">Shortage/Excess:</span>\n                        <span className={`font-medium ${parseFloat(calculations.shortage) >= 0 ? 'text-red-600' : 'text-green-600'}`}>\n                          {parseFloat(calculations.shortage) >= 0 ? '-' : '+'}₹{Math.abs(parseFloat(calculations.shortage)).toFixed(2)}\n                        </span>\n                      </div>\n                      {parseFloat(calculations.shortage) > 0 && (\n                        <p className=\"text-xs text-red-600 mt-1\">\n                          Shortage indicates less cash collected than expected\n                        </p>\n                      )}\n                      {parseFloat(calculations.shortage) < 0 && (\n                        <p className=\"text-xs text-green-600 mt-1\">\n                          Excess indicates more cash collected than expected\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                );\n              })()}\n\n              {/* Show different buttons based on reading status */}\n              {!existingReading ? (\n                <Button \n                  onClick={handleSubmit} \n                  className=\"w-full\" \n                  disabled={createReading.isPending}\n                  data-testid=\"submit-reading\"\n                >\n                  {createReading.isPending ? \"Recording...\" : \"Record Reading\"}\n                </Button>\n              ) : (\n                <div className=\"space-y-2\">\n                  <Button \n                    onClick={handleSubmit} \n                    className=\"w-full\" \n                    disabled={updateReading.isPending || !isEditable}\n                    data-testid=\"edit-reading\"\n                  >\n                    {updateReading.isPending ? \"Updating...\" : (isEditable ? \"Edit Reading\" : \"Reading Locked\")}\n                  </Button>\n                  {isEditable ? (\n                    <p className=\"text-xs text-green-600 text-center\">\n                      You can edit this reading until the next shift is recorded.\n                    </p>\n                  ) : (\n                    <p className=\"text-xs text-amber-600 text-center\">\n                      This reading cannot be edited as the next shift has data recorded.\n                    </p>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":24785},"client/src/pages/shift.tsx":{"content":"import { ArrowLeft, Save } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useShiftContext } from \"@/contexts/ShiftContext\";\n\ninterface ShiftPageProps {\n  onBack?: () => void;\n}\n\ninterface ProductRate {\n  productId: string;\n  productName: string;\n  rate: number;\n  lastUpdated?: string;\n  observedDensity?: number;\n  observedTemperature?: number;\n  densityAt15C?: number;\n}\n\ninterface Shift {\n  id: string;\n  type: 'morning' | 'evening' | 'night';\n  startTime?: string;\n  endTime?: string;\n  status: 'not-started' | 'active' | 'completed';\n  productRates: ProductRate[];\n}\n\nexport default function ShiftPage({ onBack }: ShiftPageProps) {\n  const { selectedShiftType, selectedDate, setSelectedShiftType, setSelectedDate } = useShiftContext();\n  const [productRates, setProductRates] = useState<ProductRate[]>([]);\n  const [currentShift, setCurrentShift] = useState<Shift | null>(null);\n  const { toast } = useToast();\n\n  // Fetch products for rate entry\n  const { data: products } = useQuery({\n    queryKey: ['/api/manager/products'],\n    retry: false,\n  });\n\n  // Fetch current shift data\n  const { data: shiftData } = useQuery({\n    queryKey: ['/api/shifts/current'],\n    retry: false,\n  });\n\n  // Fetch last saved rates\n  const { data: lastRates } = useQuery({\n    queryKey: ['/api/shifts/last-rates', selectedDate, selectedShiftType],\n    queryFn: () => {\n      const params = new URLSearchParams({\n        date: selectedDate,\n        shiftType: selectedShiftType\n      });\n      return fetch(`/api/shifts/last-rates?${params}`).then(res => res.json());\n    },\n    retry: false,\n  });\n\n  // Initialize product rates when products load\n  useEffect(() => {\n    if (products && products.length > 0) {\n      const initialRates = products.map((product: any) => {\n        const lastRate = lastRates?.find((rate: any) => rate.productId === product.id);\n        return {\n          productId: product.id,\n          productName: product.name,\n          rate: lastRate?.rate || 0,\n          lastUpdated: lastRate?.lastUpdated,\n        };\n      });\n      setProductRates(initialRates);\n    }\n  }, [products, lastRates]);\n\n  // Save rates mutation\n  const saveRatesMutation = useMutation({\n    mutationFn: async (rates: ProductRate[]) => {\n      return apiRequest('/api/shifts/rates', 'POST', {\n        shiftType: selectedShiftType,\n        date: selectedDate,\n        rates: rates,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Product rates saved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/shifts/last-rates', selectedDate, selectedShiftType] });\n    },\n    onError: (error) => {\n      console.error('Save rates error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save product rates\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const handleRateChange = (productId: string, rate: string) => {\n    const numericRate = parseFloat(rate) || 0;\n    setProductRates(prev => \n      prev.map(item => \n        item.productId === productId \n          ? { ...item, rate: numericRate }\n          : item\n      )\n    );\n  };\n\n  const handleDensityChange = (productId: string, density: string) => {\n    const numericDensity = parseFloat(density) || 0;\n    setProductRates(prev => \n      prev.map(item => {\n        if (item.productId === productId) {\n          const updatedItem = { ...item, observedDensity: numericDensity };\n          // Auto-calculate density at 15°C if both density and temperature are available\n          if (updatedItem.observedTemperature && numericDensity) {\n            updatedItem.densityAt15C = calculateDensityAt15C(numericDensity, updatedItem.observedTemperature);\n          }\n          return updatedItem;\n        }\n        return item;\n      })\n    );\n  };\n\n  const handleTemperatureChange = (productId: string, temperature: string) => {\n    const numericTemp = parseFloat(temperature) || 0;\n    setProductRates(prev => \n      prev.map(item => {\n        if (item.productId === productId) {\n          const updatedItem = { ...item, observedTemperature: numericTemp };\n          // Auto-calculate density at 15°C if both density and temperature are available\n          if (updatedItem.observedDensity && numericTemp) {\n            updatedItem.densityAt15C = calculateDensityAt15C(updatedItem.observedDensity, numericTemp);\n          }\n          return updatedItem;\n        }\n        return item;\n      })\n    );\n  };\n\n  // Formula to calculate density at 15°C from observed density and temperature\n  const calculateDensityAt15C = (observedDensity: number, observedTemp: number): number => {\n    // Using the standard petroleum density correction formula\n    // Density at 15°C = Observed Density * [1 + 0.0008 * (Observed Temp - 15)]\n    const correctionFactor = 1 + 0.0008 * (observedTemp - 15);\n    return Math.round((observedDensity * correctionFactor) * 100) / 100; // Round to 2 decimal places for Kg/m³\n  };\n\n  const handleSaveRates = () => {\n    saveRatesMutation.mutate(productRates);\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen bg-surface pb-20\">\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"flex items-center space-x-3\">\n          {onBack && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onBack}\n              className=\"text-white hover:bg-white/20\"\n              data-testid=\"back-button\"\n            >\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          )}\n          <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n            Shift Management\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n        {/* Shift Selection */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Select Shift</h2>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"shift-date\">Date</Label>\n                <Input\n                  id=\"shift-date\"\n                  type=\"date\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  className=\"mt-1\"\n                  data-testid=\"shift-date-select\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"shift-type\">Shift Type</Label>\n                <Select \n                  value={selectedShiftType} \n                  onValueChange={(value: 'morning' | 'evening' | 'night') => setSelectedShiftType(value)}\n                >\n                  <SelectTrigger className=\"mt-1\" data-testid=\"shift-type-select\">\n                    <SelectValue placeholder=\"Select shift type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"morning\">Morning Shift (6 AM - 2 PM)</SelectItem>\n                    <SelectItem value=\"evening\">Evening Shift (2 PM - 10 PM)</SelectItem>\n                    <SelectItem value=\"night\">Night Shift (10 PM - 6 AM)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n\n          </div>\n        </div>\n\n        {/* Product Rates Section */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold\">Product Rates</h2>\n            <Button \n              onClick={handleSaveRates}\n              disabled={saveRatesMutation.isPending}\n              size=\"sm\"\n              data-testid=\"save-rates\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              Save Rates\n            </Button>\n          </div>\n\n          <div className=\"space-y-4\">\n            {productRates.length > 0 ? (\n              productRates.map((product) => (\n                <div key={product.productId} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">{product.productName}</h3>\n                    {product.lastUpdated && (\n                      <p className=\"text-sm text-gray-500\">\n                        Last updated: {new Date(product.lastUpdated).toLocaleDateString()}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Label htmlFor={`rate-${product.productId}`} className=\"text-sm\">₹</Label>\n                    <Input\n                      id={`rate-${product.productId}`}\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={product.rate}\n                      onChange={(e) => handleRateChange(product.productId, e.target.value)}\n                      className=\"w-24\"\n                      data-testid={`rate-input-${product.productId}`}\n                    />\n                    <span className=\"text-sm text-gray-500\">/L</span>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center text-gray-500 py-8\" data-testid=\"no-products\">\n                No products configured. Please set up products first.\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Density Measurements Section */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Density Measurements</h2>\n          \n          <div className=\"space-y-4\">\n            {productRates.length > 0 ? (\n              productRates.map((product) => (\n                <div key={`density-${product.productId}`} className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-medium mb-4\">{product.productName}</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor={`density-${product.productId}`} className=\"text-sm text-gray-600\">\n                        Observed Density (Kg/m³)\n                      </Label>\n                      <Input\n                        id={`density-${product.productId}`}\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"750.00\"\n                        value={product.observedDensity || ''}\n                        onChange={(e) => handleDensityChange(product.productId, e.target.value)}\n                        className=\"w-full mt-1\"\n                        data-testid={`density-input-${product.productId}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor={`temperature-${product.productId}`} className=\"text-sm text-gray-600\">\n                        Temperature (°C)\n                      </Label>\n                      <Input\n                        id={`temperature-${product.productId}`}\n                        type=\"number\"\n                        step=\"0.1\"\n                        placeholder=\"25.0\"\n                        value={product.observedTemperature || ''}\n                        onChange={(e) => handleTemperatureChange(product.productId, e.target.value)}\n                        className=\"w-full mt-1\"\n                        data-testid={`temperature-input-${product.productId}`}\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm text-gray-600\">Density at 15°C</Label>\n                      <div className=\"mt-1 p-3 bg-gray-50 rounded border text-sm font-medium\">\n                        {product.densityAt15C ? `${product.densityAt15C} Kg/m³` : '---'}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center text-gray-500 py-8\">\n                No products available for density measurements.\n              </div>\n            )}\n          </div>\n        </div>\n\n\n      </div>\n    </div>\n  );\n}","size_bytes":12669},"client/src/pages/stock.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ArrowLeft, Package, Save, Edit3 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ShiftDateDisplay from \"@/components/ShiftDateDisplay\";\nimport { useShiftContext } from \"@/contexts/ShiftContext\";\n\ninterface StockPageProps {\n  onBack?: () => void;\n}\n\ninterface Tank {\n  id: string;\n  tankNumber: string;\n  capacity: string;\n  productName: string;\n  productId: string;\n  isActive: boolean;\n}\n\ninterface StockEntry {\n  id: string;\n  tankId: string;\n  shiftType: string;\n  shiftDate: string;\n  openingStock: string;\n  receipt: string;\n  invoiceValue: string;\n  tankNumber: string;\n  productName: string;\n  productId: string;\n}\n\nexport default function StockPage({ onBack }: StockPageProps) {\n  const { selectedShiftType, selectedDate } = useShiftContext();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [editingEntries, setEditingEntries] = useState<Record<string, boolean>>({});\n  const [formData, setFormData] = useState<Record<string, {\n    openingStock: string;\n    receipt: string;\n    invoiceValue: string;\n  }>>({});\n\n  // Fetch tanks data\n  const { data: tanks = [], isLoading: tanksLoading } = useQuery({\n    queryKey: [\"/api/manager/tanks\"],\n    enabled: true,\n  });\n\n  // Fetch existing stock entries for selected shift and date\n  const { data: stockEntries = [], isLoading: stockLoading } = useQuery({\n    queryKey: [\"/api/manager/stock\", selectedShiftType, selectedDate],\n    enabled: !!selectedShiftType && !!selectedDate,\n  });\n\n  // Create stock entry mutation\n  const createStockEntry = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/manager/stock\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create stock entry\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Stock entry saved successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager/stock\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to save stock entry\", variant: \"destructive\" });\n    },\n  });\n\n  // Update stock entry mutation\n  const updateStockEntry = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/manager/stock/${id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to update stock entry\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Stock entry updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager/stock\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update stock entry\", variant: \"destructive\" });\n    },\n  });\n\n  // Initialize form data when tanks or stock entries change\n  useEffect(() => {\n    if (tanks.length > 0) {\n      const initialData: Record<string, any> = {};\n      \n      tanks.forEach((tank: Tank) => {\n        const existingEntry = stockEntries.find((entry: StockEntry) => entry.tankId === tank.id);\n        initialData[tank.id] = {\n          openingStock: existingEntry?.openingStock || \"\",\n          receipt: existingEntry?.receipt || \"\",\n          invoiceValue: existingEntry?.invoiceValue || \"\",\n        };\n      });\n      \n      setFormData(prev => {\n        // Only update if the data has actually changed to prevent infinite loops\n        const hasChanged = JSON.stringify(prev) !== JSON.stringify(initialData);\n        return hasChanged ? initialData : prev;\n      });\n    }\n  }, [tanks.length, stockEntries.length]);\n\n  const handleInputChange = (tankId: string, field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [tankId]: {\n        ...prev[tankId],\n        [field]: value,\n      },\n    }));\n  };\n\n  const handleSave = async (tankId: string) => {\n    const data = formData[tankId];\n    if (!data || !selectedShiftType || !selectedDate) return;\n\n    const existingEntry = stockEntries.find((entry: StockEntry) => entry.tankId === tankId);\n\n    const stockData = {\n      tankId,\n      shiftType: selectedShiftType,\n      shiftDate: selectedDate,\n      openingStock: data.openingStock,\n      receipt: data.receipt,\n      invoiceValue: data.invoiceValue,\n    };\n\n    if (existingEntry) {\n      await updateStockEntry.mutateAsync({ id: existingEntry.id, data: stockData });\n    } else {\n      await createStockEntry.mutateAsync(stockData);\n    }\n\n    setEditingEntries(prev => ({ ...prev, [tankId]: false }));\n  };\n\n  const toggleEdit = (tankId: string) => {\n    setEditingEntries(prev => ({ ...prev, [tankId]: !prev[tankId] }));\n  };\n\n  if (tanksLoading || stockLoading) {\n    return (\n      <div className=\"min-h-screen bg-surface pb-20\">\n        <div className=\"bg-primary text-white p-4\">\n          <div className=\"flex items-center space-x-3\">\n            {onBack && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onBack}\n                className=\"text-white hover:bg-white/20\"\n                data-testid=\"back-button\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n            )}\n            <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n              Stock Management\n            </h1>\n          </div>\n        </div>\n        <div className=\"p-4\">\n          <div className=\"text-center py-8\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-surface pb-20\">\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"flex items-center space-x-3\">\n          {onBack && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onBack}\n              className=\"text-white hover:bg-white/20\"\n              data-testid=\"back-button\"\n            >\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          )}\n          <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n            Stock Management\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <ShiftDateDisplay\n          selectedShiftType={selectedShiftType}\n          selectedDate={selectedDate}\n        />\n\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div className=\"bg-white rounded-lg shadow-sm p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Package className=\"h-8 w-8 text-primary\" />\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-600\">Total Tanks</h3>\n                <p className=\"text-xl font-semibold\" data-testid=\"total-tanks\">{tanks.length}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-sm p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Package className=\"h-8 w-8 text-green-500\" />\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-600\">Entries Saved</h3>\n                <p className=\"text-xl font-semibold\" data-testid=\"entries-saved\">{stockEntries.length}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h2 className=\"text-lg font-semibold\">Tank Stock Information</h2>\n          \n          {tanks.map((tank: Tank) => {\n            const existingEntry = stockEntries.find((entry: StockEntry) => entry.tankId === tank.id);\n            const isEditing = editingEntries[tank.id];\n            const tankFormData = formData[tank.id] || { openingStock: \"\", receipt: \"\", invoiceValue: \"\" };\n\n            return (\n              <Card key={tank.id} className=\"bg-white\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">\n                      Tank {tank.tankNumber} - {tank.productName}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      {existingEntry && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => toggleEdit(tank.id)}\n                          data-testid={`edit-tank-${tank.id}`}\n                        >\n                          <Edit3 className=\"h-4 w-4 mr-1\" />\n                          {isEditing ? \"Cancel\" : \"Edit\"}\n                        </Button>\n                      )}\n                      <Button\n                        onClick={() => handleSave(tank.id)}\n                        disabled={createStockEntry.isPending || updateStockEntry.isPending}\n                        data-testid={`save-tank-${tank.id}`}\n                      >\n                        <Save className=\"h-4 w-4 mr-1\" />\n                        Save\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    Capacity: {tank.capacity}L\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 gap-4\">\n                    <div>\n                      <Label htmlFor={`opening-${tank.id}`}>Opening Stock (Liters)</Label>\n                      <Input\n                        id={`opening-${tank.id}`}\n                        type=\"number\"\n                        placeholder=\"Enter opening stock in liters\"\n                        value={tankFormData.openingStock}\n                        onChange={(e) => handleInputChange(tank.id, \"openingStock\", e.target.value)}\n                        disabled={existingEntry && !isEditing}\n                        data-testid={`input-opening-stock-${tank.id}`}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor={`receipt-${tank.id}`}>Receipt (Liters)</Label>\n                      <Input\n                        id={`receipt-${tank.id}`}\n                        type=\"number\"\n                        placeholder=\"Enter liters received\"\n                        value={tankFormData.receipt}\n                        onChange={(e) => handleInputChange(tank.id, \"receipt\", e.target.value)}\n                        disabled={existingEntry && !isEditing}\n                        data-testid={`input-receipt-${tank.id}`}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor={`invoice-${tank.id}`}>Invoice Value (₹)</Label>\n                      <Input\n                        id={`invoice-${tank.id}`}\n                        type=\"number\"\n                        placeholder=\"Enter total invoice amount\"\n                        value={tankFormData.invoiceValue}\n                        onChange={(e) => handleInputChange(tank.id, \"invoiceValue\", e.target.value)}\n                        disabled={existingEntry && !isEditing}\n                        data-testid={`input-invoice-value-${tank.id}`}\n                      />\n                    </div>\n                  </div>\n                  \n                  {existingEntry && (\n                    <div className=\"text-xs text-gray-500 pt-2 border-t\">\n                      Last updated: {new Date(existingEntry.createdAt).toLocaleString()}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n\n          {tanks.length === 0 && (\n            <div className=\"text-center text-gray-500 py-8\" data-testid=\"no-tanks\">\n              No tanks available. Please add tanks in Tank Management first.\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12410},"client/src/pages/manager-login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, AlertCircle, Building2, User } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  role: z.enum([\"dealer\", \"manager\"]),\n  phoneNumber: z.string().min(1, \"Phone number is required\"),\n  password: z.string().optional(),\n}).refine((data) => {\n  // Password is required for managers\n  if (data.role === \"manager\") {\n    return data.password && data.password.length > 0;\n  }\n  return true;\n}, {\n  message: \"Password is required for managers\",\n  path: [\"password\"],\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function UnifiedLogin() {\n  const { t } = useTranslation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      role: \"dealer\",\n      phoneNumber: \"\",\n      password: \"\",\n    },\n  });\n\n  const selectedRole = form.watch(\"role\");\n\n  const onSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      if (data.role === \"dealer\") {\n        // Redirect to Replit Auth for dealer login\n        window.location.href = \"/api/login\";\n      } else {\n        // Manager login via API\n        const response = await apiRequest(\"/api/manager/login\", \"POST\", {\n          phoneNumber: data.phoneNumber,\n          password: data.password,\n        });\n        \n        console.log(\"Manager login response:\", response);\n        \n        if (response.success) {\n          // Redirect to manager dashboard\n          window.location.reload();\n        } else {\n          setError(response.message || \"Invalid manager credentials\");\n        }\n      }\n    } catch (err: any) {\n      setError(err.message || \"Login failed. Please check your credentials.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            FuelFlow Login\n          </CardTitle>\n          <CardDescription>\n            Sign in to access your dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Login as</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Select your role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"dealer\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Building2 className=\"h-4 w-4\" />\n                            <span>Dealer/Owner</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"manager\">\n                          <div className=\"flex items-center space-x-2\">\n                            <User className=\"h-4 w-4\" />\n                            <span>Manager</span>\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phoneNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {selectedRole === \"dealer\" ? \"Phone Number\" : \"Phone Number (Login ID)\"}\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder={selectedRole === \"dealer\" \n                          ? \"Enter your phone number\" \n                          : \"Enter manager phone number\"\n                        }\n                        {...field} \n                        data-testid=\"input-phone-number\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {selectedRole === \"manager\" && (\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\" \n                            {...field} \n                            data-testid=\"input-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"toggle-password\"\n                          >\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full bg-primary text-white\"\n                data-testid=\"button-login\"\n              >\n                {isLoading ? \"Signing in...\" : `Sign in as ${selectedRole === \"dealer\" ? \"Dealer\" : \"Manager\"}`}\n              </Button>\n            </form>\n          </Form>\n\n          {selectedRole === \"dealer\" && (\n            <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n              <p className=\"text-xs text-blue-700\">\n                Dealers will be redirected to secure authentication. Managers use credentials provided by the dealer.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7846},"client/src/components/ShiftDateDisplay.tsx":{"content":"interface ShiftDateDisplayProps {\n  selectedShiftType: 'morning' | 'evening' | 'night';\n  selectedDate: string;\n}\n\nconst getShiftDisplayName = (shiftType: 'morning' | 'evening' | 'night') => {\n  switch (shiftType) {\n    case 'morning':\n      return 'Morning Shift (6 AM - 2 PM)';\n    case 'evening':\n      return 'Evening Shift (2 PM - 10 PM)';\n    case 'night':\n      return 'Night Shift (10 PM - 6 AM)';\n  }\n};\n\nexport default function ShiftDateDisplay({\n  selectedShiftType,\n  selectedDate,\n}: ShiftDateDisplayProps) {\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { \n      weekday: 'short', \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  return (\n    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4\">\n      <div className=\"text-xs text-blue-600 font-medium\">\n        Viewing data for: {getShiftDisplayName(selectedShiftType)} on {formatDate(selectedDate)}\n      </div>\n    </div>\n  );\n}","size_bytes":1035},"client/src/contexts/ShiftContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\ntype ShiftType = 'morning' | 'evening' | 'night';\n\ninterface ShiftContextType {\n  selectedShiftType: ShiftType;\n  selectedDate: string;\n  setSelectedShiftType: (shiftType: ShiftType) => void;\n  setSelectedDate: (date: string) => void;\n}\n\nconst ShiftContext = createContext<ShiftContextType | undefined>(undefined);\n\nexport const useShiftContext = () => {\n  const context = useContext(ShiftContext);\n  if (context === undefined) {\n    throw new Error('useShiftContext must be used within a ShiftProvider');\n  }\n  return context;\n};\n\ninterface ShiftProviderProps {\n  children: ReactNode;\n}\n\nexport const ShiftProvider = ({ children }: ShiftProviderProps) => {\n  const [selectedShiftType, setSelectedShiftType] = useState<ShiftType>('morning');\n  const [selectedDate, setSelectedDate] = useState<string>(\n    new Date().toISOString().split('T')[0]\n  );\n\n  return (\n    <ShiftContext.Provider\n      value={{\n        selectedShiftType,\n        selectedDate,\n        setSelectedShiftType,\n        setSelectedDate,\n      }}\n    >\n      {children}\n    </ShiftContext.Provider>\n  );\n};","size_bytes":1149},"client/src/hooks/useManagerAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useManagerAuth() {\n  const { data: manager, isLoading } = useQuery({\n    queryKey: [\"/api/auth/manager\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchOnReconnect: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  return {\n    manager,\n    isLoading,\n    isManagerAuthenticated: !!manager,\n  };\n}","size_bytes":542},"client/src/pages/density.tsx":{"content":"import { ArrowLeft, Droplets, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface DensityPageProps {\n  onBack?: () => void;\n}\n\nexport default function DensityPage({ onBack }: DensityPageProps) {\n  return (\n    <div className=\"min-h-screen bg-surface pb-20\">\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {onBack && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onBack}\n                className=\"text-white hover:bg-white/20\"\n                data-testid=\"back-button\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n            )}\n            <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n              Density Testing\n            </h1>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-white hover:bg-white/20\"\n            data-testid=\"add-density\"\n          >\n            <Plus className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Today's Tests</h2>\n          <div className=\"space-y-4\">\n            <div className=\"text-center text-gray-500 py-8\" data-testid=\"no-tests\">\n              No density tests recorded today\n            </div>\n            <Button className=\"w-full\" data-testid=\"record-density\">\n              Record Density Test\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Test Guidelines</h2>\n          <div className=\"space-y-3 text-sm text-gray-600\">\n            <div className=\"flex items-center space-x-3\">\n              <Droplets className=\"h-4 w-4 text-primary\" />\n              <span>Record density at 15°C temperature</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Droplets className=\"h-4 w-4 text-primary\" />\n              <span>Test each tank at least once per shift</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Droplets className=\"h-4 w-4 text-primary\" />\n              <span>Normal range: 0.72-0.78 g/ml</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2570},"client/src/pages/dispensing-units.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, GaugeIcon, Edit3, Trash2, Fuel, Calendar } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\ninterface DispensingUnitsPageProps {\n  onBack: () => void;\n}\n\nconst nozzleSchema = z.object({\n  tankId: z.string().min(1, \"Tank selection is required\"),\n  calibrationValidUntil: z.date({\n    required_error: \"Calibration date is required\",\n  }),\n});\n\nconst duSchema = z.object({\n  name: z.string().min(1, \"DU name is required\"),\n  numberOfNozzles: z.number().min(1, \"At least 1 nozzle is required\").max(6, \"Maximum 6 nozzles allowed\"),\n  nozzles: z.array(nozzleSchema),\n});\n\ntype DUForm = z.infer<typeof duSchema>;\n\nexport default function DispensingUnitsPage({ onBack }: DispensingUnitsPageProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingDU, setEditingDU] = useState<any>(null);\n\n  const { data: dispensingUnits = [], isLoading: duLoading } = useQuery<any[]>({\n    queryKey: [\"/api/dispensing-units\"],\n  });\n\n  const { data: tanks = [], isLoading: tanksLoading } = useQuery<any[]>({\n    queryKey: [\"/api/tanks\"],\n  });\n\n  const getDefaultCalibrationDate = () => {\n    const date = new Date();\n    date.setFullYear(date.getFullYear() + 1);\n    return date;\n  };\n\n  const form = useForm<DUForm>({\n    resolver: zodResolver(duSchema),\n    defaultValues: {\n      name: \"\",\n      numberOfNozzles: 2,\n      nozzles: [\n        { tankId: \"\", calibrationValidUntil: getDefaultCalibrationDate() },\n        { tankId: \"\", calibrationValidUntil: getDefaultCalibrationDate() }\n      ],\n    },\n  });\n\n  const numberOfNozzles = form.watch(\"numberOfNozzles\");\n\n  // Update nozzles array when number of nozzles changes\n  useEffect(() => {\n    const currentNozzles = form.getValues(\"nozzles\");\n    \n    const newNozzles = Array.from({ length: numberOfNozzles }, (_, index) => \n      currentNozzles[index] || { tankId: \"\", calibrationValidUntil: getDefaultCalibrationDate() }\n    );\n    form.setValue(\"nozzles\", newNozzles);\n  }, [numberOfNozzles, form]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: DUForm) => {\n      return apiRequest(\"/api/dispensing-units\", \"POST\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"dispensingUnits.createSuccess\"),\n      });\n      setIsDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/dispensing-units\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: DUForm }) => {\n      return apiRequest(`/api/dispensing-units/${id}`, \"PATCH\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"dispensingUnits.updateSuccess\"),\n      });\n      setIsDialogOpen(false);\n      setEditingDU(null);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/dispensing-units\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/dispensing-units/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"dispensingUnits.deleteSuccess\"),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dispensing-units\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: DUForm) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Available tanks:\", tanks);\n    \n    if (editingDU) {\n      updateMutation.mutate({ id: editingDU.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (du: any) => {\n    setEditingDU(du);\n    form.reset({\n      name: du.name,\n      numberOfNozzles: du.numberOfNozzles,\n      nozzles: du.nozzles || [],\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleAddNew = () => {\n    setEditingDU(null);\n    form.reset({\n      name: \"\",\n      numberOfNozzles: 2,\n      nozzles: [\n        { tankId: \"\", calibrationValidUntil: getDefaultCalibrationDate() },\n        { tankId: \"\", calibrationValidUntil: getDefaultCalibrationDate() }\n      ],\n    });\n    setIsDialogOpen(true);\n  };\n\n  const getTankName = (tankId: string) => {\n    const tank = tanks.find((t: any) => t.id === tankId);\n    return tank ? tank.tankNumber : \"Unknown Tank\";\n  };\n\n  const getFuelTypeColor = () => {\n    return \"text-blue-600 bg-blue-50\";\n  };\n\n  if (duLoading || tanksLoading) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onBack}\n            className=\"mr-3\"\n            data-testid=\"back-button\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n            {t(\"menu.dispensingUnits\")}\n          </h1>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleAddNew} data-testid=\"add-du-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"dispensingUnits.addDU\")}\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingDU ? t(\"dispensingUnits.editDU\") : t(\"dispensingUnits.addDU\")}\n              </DialogTitle>\n              <DialogDescription>\n                {editingDU ? t(\"dispensingUnits.editDescription\") : t(\"dispensingUnits.addDescription\")}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"max-h-[60vh] overflow-y-auto pr-2\">\n              <form id=\"du-form\" onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">{t(\"dispensingUnits.duName\")}</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                  placeholder=\"e.g., DU-01, Pump A\"\n                  data-testid=\"input-du-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"numberOfNozzles\">{t(\"dispensingUnits.numberOfNozzles\")}</Label>\n                <Select\n                  value={form.watch(\"numberOfNozzles\").toString()}\n                  onValueChange={(value) => form.setValue(\"numberOfNozzles\", parseInt(value))}\n                >\n                  <SelectTrigger data-testid=\"select-nozzles\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1\">1</SelectItem>\n                    <SelectItem value=\"2\">2</SelectItem>\n                    <SelectItem value=\"4\">4</SelectItem>\n                    <SelectItem value=\"6\">6</SelectItem>\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.numberOfNozzles && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.numberOfNozzles.message}</p>\n                )}\n              </div>\n\n              {/* Dynamic Nozzle Configuration */}\n              <div className=\"space-y-4\">\n                <Label className=\"text-base font-medium\">Nozzle Configuration</Label>\n                {Array.from({ length: numberOfNozzles }, (_, index) => (\n                  <div key={index} className=\"border rounded-lg p-4 space-y-3\">\n                    <h4 className=\"font-medium\">Nozzle #{index + 1}</h4>\n                    \n                    <div className=\"space-y-2\">\n                      <Label>Connected Tank</Label>\n                      <Select\n                        value={form.watch(`nozzles.${index}.tankId`) || \"\"}\n                        onValueChange={(value) => form.setValue(`nozzles.${index}.tankId`, value)}\n                      >\n                        <SelectTrigger data-testid={`select-nozzle-${index}-tank`}>\n                          <SelectValue placeholder=\"Select tank\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {tanks.length > 0 ? tanks.map((tank: any) => (\n                            <SelectItem key={tank.id} value={tank.id}>\n                              {tank.tankNumber}\n                            </SelectItem>\n                          )) : (\n                            <SelectItem value=\"\" disabled>No tanks available</SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Calibration Valid Until</Label>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            className=\"w-full justify-start text-left font-normal\"\n                            data-testid={`select-nozzle-${index}-calibration`}\n                          >\n                            <Calendar className=\"mr-2 h-4 w-4\" />\n                            {form.watch(`nozzles.${index}.calibrationValidUntil`) \n                              ? format(form.watch(`nozzles.${index}.calibrationValidUntil`), \"PPP\")\n                              : \"Pick a date\"\n                            }\n                          </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\">\n                          <CalendarComponent\n                            mode=\"single\"\n                            selected={form.watch(`nozzles.${index}.calibrationValidUntil`)}\n                            onSelect={(date) => form.setValue(`nozzles.${index}.calibrationValidUntil`, date || new Date())}\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              </form>\n            </div>\n            <div className=\"flex space-x-3 pt-4 border-t bg-white sticky bottom-0\">\n              <Button\n                type=\"submit\"\n                form=\"du-form\"\n                disabled={createMutation.isPending || updateMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"save-du-button\"\n              >\n                {(createMutation.isPending || updateMutation.isPending) ? \n                  t(\"common.saving\") : t(\"common.save\")}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsDialogOpen(false)}\n                className=\"flex-1\"\n                data-testid=\"cancel-du-button\"\n              >\n                {t(\"common.cancel\")}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Notice about tank requirement */}\n      {tanks.length === 0 && (\n        <Card className=\"mb-4 border-orange-200 bg-orange-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2 text-orange-800\">\n              <Fuel className=\"h-5 w-5\" />\n              <p className=\"text-sm\">\n                {t(\"dispensingUnits.noTanksNotice\")}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Dispensing Units List */}\n      {dispensingUnits.length === 0 ? (\n        <Card className=\"text-center py-8\">\n          <CardContent>\n            <GaugeIcon className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">{t(\"dispensingUnits.noDUs\")}</h3>\n            <p className=\"text-gray-600 mb-4\">{t(\"dispensingUnits.noDUsDescription\")}</p>\n            <Button \n              onClick={handleAddNew} \n              disabled={tanks.length === 0}\n              data-testid=\"add-first-du-button\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"dispensingUnits.addFirstDU\")}\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {dispensingUnits.map((du: any) => (\n            <Card key={du.id} data-testid={`du-card-${du.id}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"p-2 rounded-lg bg-primary/10\">\n                      <GaugeIcon className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\" data-testid={`du-name-${du.id}`}>\n                        {du.name}\n                      </h3>\n                      <div className=\"flex flex-col space-y-1\">\n                        <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium w-fit ${getFuelTypeColor()}`}>\n                          DU Unit\n                        </span>\n                        <span className=\"text-xs text-gray-600\">\n                          {du.numberOfNozzles} nozzles\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => handleEdit(du)}\n                      data-testid={`edit-du-${du.id}`}\n                    >\n                      <Edit3 className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => deleteMutation.mutate(du.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`delete-du-${du.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Nozzle indicators */}\n                <div className=\"flex flex-wrap gap-2\">\n                  {Array.from({ length: du.nozzles }, (_, i) => (\n                    <div\n                      key={i}\n                      className=\"flex items-center space-x-1 bg-gray-100 px-2 py-1 rounded text-xs\"\n                    >\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span>Nozzle {i + 1}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":17086},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, AlertCircle, Building2, User } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  role: z.enum([\"dealer\", \"manager\"]),\n  phoneNumber: z.string().min(1, \"Phone number is required\"),\n  password: z.string().optional(),\n}).refine((data) => {\n  // Password is required for managers\n  if (data.role === \"manager\") {\n    return data.password && data.password.length > 0;\n  }\n  return true;\n}, {\n  message: \"Password is required for managers\",\n  path: [\"password\"],\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const { t } = useTranslation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      role: \"dealer\",\n      phoneNumber: \"\",\n      password: \"\",\n    },\n  });\n\n  const selectedRole = form.watch(\"role\");\n\n  const onSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      if (data.role === \"dealer\") {\n        // Redirect to Replit Auth for dealer login\n        window.location.href = \"/api/login\";\n      } else {\n        // Manager login via API\n        const response = await apiRequest(\"/api/manager/login\", \"POST\", {\n          phoneNumber: data.phoneNumber,\n          password: data.password,\n        });\n        \n        if (response.success) {\n          // Redirect to manager dashboard\n          window.location.reload();\n        } else {\n          setError(response.message || \"Invalid manager credentials\");\n        }\n      }\n    } catch (err: any) {\n      setError(err.message || \"Login failed. Please check your credentials.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            FuelFlow Login\n          </CardTitle>\n          <CardDescription>\n            Sign in to access your dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Login as</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Select your role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"dealer\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Building2 className=\"h-4 w-4\" />\n                            <span>Dealer/Owner</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"manager\">\n                          <div className=\"flex items-center space-x-2\">\n                            <User className=\"h-4 w-4\" />\n                            <span>Manager</span>\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phoneNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {selectedRole === \"dealer\" ? \"Phone Number\" : \"Phone Number (Login ID)\"}\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder={selectedRole === \"dealer\" \n                          ? \"Enter your phone number\" \n                          : \"Enter manager phone number\"\n                        }\n                        {...field} \n                        data-testid=\"input-phone-number\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {selectedRole === \"manager\" && (\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input \n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\" \n                            {...field} \n                            data-testid=\"input-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"toggle-password\"\n                          >\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full bg-primary text-white\"\n                data-testid=\"button-login\"\n              >\n                {isLoading ? \"Signing in...\" : `Sign in as ${selectedRole === \"dealer\" ? \"Dealer\" : \"Manager\"}`}\n              </Button>\n            </form>\n          </Form>\n\n          {selectedRole === \"dealer\" && (\n            <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n              <p className=\"text-xs text-blue-700\">\n                Dealers will be redirected to secure authentication. Managers use credentials provided by the dealer.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7772},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, Edit, Trash2, Package } from \"lucide-react\";\nimport type { Product, InsertProduct } from \"@shared/schema\";\n\ninterface ProductsPageProps {\n  onBack: () => void;\n}\n\nexport default function ProductsPage({ onBack }: ProductsPageProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n\n  const [formData, setFormData] = useState<InsertProduct>({\n    retailOutletId: \"\",\n    name: \"\",\n    pricePerLiter: \"0\",\n  });\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertProduct) => {\n      const response = await apiRequest(\"/api/products\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: \"Product created successfully\",\n      });\n      setIsDialogOpen(false);\n      resetForm();\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { id: string; product: Partial<InsertProduct> }) => {\n      const response = await apiRequest(`/api/products/${data.id}`, \"PUT\", data.product);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: \"Product updated successfully\",\n      });\n      setIsDialogOpen(false);\n      resetForm();\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(`/api/products/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: \"Product deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      retailOutletId: \"\",\n      name: \"\",\n      pricePerLiter: \"0\",\n    });\n    setEditingProduct(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate required fields\n    if (!formData.name.trim()) {\n      toast({\n        title: t(\"common.error\"),\n        description: \"Product name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.pricePerLiter || parseFloat(formData.pricePerLiter) <= 0) {\n      toast({\n        title: t(\"common.error\"),\n        description: \"Valid price is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingProduct) {\n      updateMutation.mutate({ id: editingProduct.id, product: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    setFormData({\n      retailOutletId: product.retailOutletId,\n      name: product.name,\n      pricePerLiter: product.pricePerLiter,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string, productName: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${productName}\"? This action cannot be undone.`)) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const getFuelTypeLabel = (type: string) => {\n    switch (type) {\n      case \"petrol\":\n        return t(\"tankManagement.petrol\");\n      case \"diesel\":\n        return t(\"tankManagement.diesel\");\n      case \"premium\":\n        return t(\"tankManagement.premium\");\n      default:\n        return type;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onBack}\n            className=\"mr-3\"\n            data-testid=\"back-button\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n            Products\n          </h1>\n        </div>\n\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm} data-testid=\"add-product-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Product\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Product Name</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"Enter product name\"\n                  required\n                  data-testid=\"input-product-name\"\n                />\n              </div>\n\n\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"pricePerLiter\">Price per Liter (₹)</Label>\n                <Input\n                  id=\"pricePerLiter\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.pricePerLiter}\n                  onChange={(e) => setFormData({ ...formData, pricePerLiter: e.target.value })}\n                  placeholder=\"0.00\"\n                  required\n                  data-testid=\"input-price\"\n                />\n              </div>\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"save-product-button\"\n                >\n                  {createMutation.isPending || updateMutation.isPending\n                    ? t(\"common.saving\")\n                    : editingProduct\n                    ? t(\"common.update\")\n                    : t(\"common.save\")}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                  className=\"flex-1\"\n                  data-testid=\"cancel-button\"\n                >\n                  {t(\"common.cancel\")}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Products List */}\n      <div className=\"space-y-4\">\n        {products.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Package className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">\n                No Products Added\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                Add your first product to start managing fuel inventory\n              </p>\n              <Button onClick={() => setIsDialogOpen(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Product\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          products.map((product: Product) => (\n            <Card key={product.id} data-testid={`product-card-${product.id}`}>\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center text-lg\">\n                    <Package className=\"h-5 w-5 mr-2 text-primary\" />\n                    {product.name}\n                  </CardTitle>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(product)}\n                      data-testid={`edit-product-${product.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(product.id, product.name)}\n                      data-testid={`delete-product-${product.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-sm\">\n                  <div>\n                    <p className=\"text-gray-600\">Price per Liter</p>\n                    <p className=\"font-medium text-lg\">₹{parseFloat(product.pricePerLiter).toFixed(2)}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10799},"client/src/pages/ro-details.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, MapPin, Phone, Mail, Building } from \"lucide-react\";\n\ninterface RODetailsPageProps {\n  onBack: () => void;\n}\n\nexport default function RODetailsPage({ onBack }: RODetailsPageProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n\n  const { data: retailOutlet, isLoading } = useQuery({\n    queryKey: [\"/api/retail-outlet\"],\n  }) as { data: any, isLoading: boolean };\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    sapcode: \"\",\n    oilCompany: \"\",\n  });\n\n  // Update form data when retail outlet data is loaded\n  useEffect(() => {\n    if (retailOutlet) {\n      setFormData({\n        name: retailOutlet?.name || \"\",\n        address: retailOutlet?.address || \"\",\n        phoneNumber: retailOutlet?.phoneNumber || \"\",\n        sapcode: retailOutlet?.sapcode || \"\",\n        oilCompany: retailOutlet?.oilCompany || \"\",\n      });\n    }\n  }, [retailOutlet]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(`/api/retail-outlet/${retailOutlet.id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"roDetails.updateSuccess\"),\n      });\n      setIsEditing(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/retail-outlet\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    if (retailOutlet) {\n      setFormData({\n        name: retailOutlet?.name || \"\",\n        address: retailOutlet?.address || \"\",\n        phoneNumber: retailOutlet?.phoneNumber || \"\",\n        sapcode: retailOutlet?.sapcode || \"\",\n        oilCompany: retailOutlet?.oilCompany || \"\",\n      });\n    }\n    setIsEditing(false);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      {/* Header */}\n      <div className=\"flex items-center mb-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={onBack}\n          className=\"mr-3\"\n          data-testid=\"back-button\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n          {t(\"menu.roDetails\")}\n        </h1>\n      </div>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <Building className=\"h-5 w-5 mr-2 text-primary\" />\n            {t(\"roDetails.title\")}\n          </CardTitle>\n          {!isEditing && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsEditing(true)}\n              data-testid=\"edit-button\"\n            >\n              {t(\"common.edit\")}\n            </Button>\n          )}\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">{t(\"roDetails.name\")}</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                disabled={!isEditing}\n                data-testid=\"input-name\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">{t(\"roDetails.address\")}</Label>\n              <Textarea\n                id=\"address\"\n                value={formData.address}\n                onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                disabled={!isEditing}\n                rows={3}\n                data-testid=\"input-address\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phoneNumber\">{t(\"setup.phoneNumber\")}</Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"phoneNumber\"\n                    value={formData.phoneNumber}\n                    onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}\n                    disabled={!isEditing}\n                    className=\"pl-10\"\n                    data-testid=\"input-contact\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"sapcode\">{t(\"setup.sapcode\")}</Label>\n                <Input\n                  id=\"sapcode\"\n                  value={formData.sapcode}\n                  onChange={(e) => setFormData({ ...formData, sapcode: e.target.value })}\n                  disabled={!isEditing}\n                  data-testid=\"input-sapcode\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"oilCompany\">{t(\"setup.oilCompany\")}</Label>\n              <Input\n                id=\"oilCompany\"\n                value={formData.oilCompany}\n                onChange={(e) => setFormData({ ...formData, oilCompany: e.target.value })}\n                disabled={!isEditing}\n                data-testid=\"input-oil-company\"\n              />\n            </div>\n\n            {isEditing && (\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  type=\"submit\"\n                  disabled={updateMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"save-button\"\n                >\n                  {updateMutation.isPending ? t(\"common.saving\") : t(\"common.save\")}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCancel}\n                  className=\"flex-1\"\n                  data-testid=\"cancel-button\"\n                >\n                  {t(\"common.cancel\")}\n                </Button>\n              </div>\n            )}\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7286},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ArrowLeft, Settings, Languages, DollarSign, Shield, Fuel, LogOut } from \"lucide-react\";\n\ninterface SettingsPageProps {\n  onBack: () => void;\n}\n\nexport default function SettingsPage({ onBack }: SettingsPageProps) {\n  const { t, i18n } = useTranslation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const [fuelPrices, setFuelPrices] = useState({\n    petrolPrice: 0,\n    dieselPrice: 0,\n    cngPrice: 0,\n  });\n\n  const [appSettings, setAppSettings] = useState({\n    enableNotifications: true,\n    autoBackup: true,\n    showLowStockAlerts: true,\n    requireShiftConfirmation: true,\n  });\n\n  const { data: settings, isLoading } = useQuery({\n    queryKey: [\"/api/settings\"],\n    onSuccess: (data) => {\n      if (data?.fuelPrices) {\n        setFuelPrices(data.fuelPrices);\n      }\n      if (data?.appSettings) {\n        setAppSettings(data.appSettings);\n      }\n    },\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"/api/settings\", {\n        method: \"PATCH\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"settings.updateSuccess\"),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLanguageChange = (language: string) => {\n    i18n.changeLanguage(language);\n    localStorage.setItem('language', language);\n    toast({\n      title: t(\"common.success\"),\n      description: t(\"settings.languageChanged\"),\n    });\n  };\n\n  const handleFuelPriceUpdate = () => {\n    updateSettingsMutation.mutate({\n      fuelPrices,\n    });\n  };\n\n  const handleAppSettingsUpdate = () => {\n    updateSettingsMutation.mutate({\n      appSettings,\n    });\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      {/* Header */}\n      <div className=\"flex items-center mb-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={onBack}\n          className=\"mr-3\"\n          data-testid=\"back-button\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n          {t(\"menu.settings\")}\n        </h1>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Language Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Languages className=\"h-5 w-5 mr-2 text-primary\" />\n              {t(\"settings.language\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <Label>{t(\"settings.selectLanguage\")}</Label>\n              <Select value={i18n.language} onValueChange={handleLanguageChange}>\n                <SelectTrigger data-testid=\"select-language\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"en\">English</SelectItem>\n                  <SelectItem value=\"hi\">हिंदी (Hindi)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Fuel Prices */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <DollarSign className=\"h-5 w-5 mr-2 text-primary\" />\n              {t(\"settings.fuelPrices\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"petrolPrice\">{t(\"settings.petrolPrice\")} (₹/L)</Label>\n                  <Input\n                    id=\"petrolPrice\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={fuelPrices.petrolPrice}\n                    onChange={(e) => setFuelPrices({\n                      ...fuelPrices,\n                      petrolPrice: parseFloat(e.target.value) || 0\n                    })}\n                    data-testid=\"input-petrol-price\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"dieselPrice\">{t(\"settings.dieselPrice\")} (₹/L)</Label>\n                  <Input\n                    id=\"dieselPrice\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={fuelPrices.dieselPrice}\n                    onChange={(e) => setFuelPrices({\n                      ...fuelPrices,\n                      dieselPrice: parseFloat(e.target.value) || 0\n                    })}\n                    data-testid=\"input-diesel-price\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"cngPrice\">{t(\"settings.cngPrice\")} (₹/Kg)</Label>\n                  <Input\n                    id=\"cngPrice\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={fuelPrices.cngPrice}\n                    onChange={(e) => setFuelPrices({\n                      ...fuelPrices,\n                      cngPrice: parseFloat(e.target.value) || 0\n                    })}\n                    data-testid=\"input-cng-price\"\n                  />\n                </div>\n              </div>\n              <Button\n                onClick={handleFuelPriceUpdate}\n                disabled={updateSettingsMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"update-fuel-prices-button\"\n              >\n                {updateSettingsMutation.isPending ? t(\"common.saving\") : t(\"settings.updatePrices\")}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* App Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Settings className=\"h-5 w-5 mr-2 text-primary\" />\n              {t(\"settings.appSettings\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"enableNotifications\">{t(\"settings.enableNotifications\")}</Label>\n                  <p className=\"text-sm text-gray-600\">{t(\"settings.enableNotificationsDesc\")}</p>\n                </div>\n                <Switch\n                  id=\"enableNotifications\"\n                  checked={appSettings.enableNotifications}\n                  onCheckedChange={(checked) => setAppSettings({\n                    ...appSettings,\n                    enableNotifications: checked\n                  })}\n                  data-testid=\"switch-notifications\"\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"autoBackup\">{t(\"settings.autoBackup\")}</Label>\n                  <p className=\"text-sm text-gray-600\">{t(\"settings.autoBackupDesc\")}</p>\n                </div>\n                <Switch\n                  id=\"autoBackup\"\n                  checked={appSettings.autoBackup}\n                  onCheckedChange={(checked) => setAppSettings({\n                    ...appSettings,\n                    autoBackup: checked\n                  })}\n                  data-testid=\"switch-auto-backup\"\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"showLowStockAlerts\">{t(\"settings.showLowStockAlerts\")}</Label>\n                  <p className=\"text-sm text-gray-600\">{t(\"settings.showLowStockAlertsDesc\")}</p>\n                </div>\n                <Switch\n                  id=\"showLowStockAlerts\"\n                  checked={appSettings.showLowStockAlerts}\n                  onCheckedChange={(checked) => setAppSettings({\n                    ...appSettings,\n                    showLowStockAlerts: checked\n                  })}\n                  data-testid=\"switch-low-stock-alerts\"\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"requireShiftConfirmation\">{t(\"settings.requireShiftConfirmation\")}</Label>\n                  <p className=\"text-sm text-gray-600\">{t(\"settings.requireShiftConfirmationDesc\")}</p>\n                </div>\n                <Switch\n                  id=\"requireShiftConfirmation\"\n                  checked={appSettings.requireShiftConfirmation}\n                  onCheckedChange={(checked) => setAppSettings({\n                    ...appSettings,\n                    requireShiftConfirmation: checked\n                  })}\n                  data-testid=\"switch-shift-confirmation\"\n                />\n              </div>\n\n              <Button\n                onClick={handleAppSettingsUpdate}\n                disabled={updateSettingsMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"update-app-settings-button\"\n              >\n                {updateSettingsMutation.isPending ? t(\"common.saving\") : t(\"settings.updateSettings\")}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Account Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Shield className=\"h-5 w-5 mr-2 text-primary\" />\n              {t(\"settings.account\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                {user?.profileImageUrl ? (\n                  <img \n                    src={user.profileImageUrl} \n                    alt=\"Profile\" \n                    className=\"w-10 h-10 rounded-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm font-medium text-primary\">\n                      {(user?.firstName || user?.email || \"U\").charAt(0).toUpperCase()}\n                    </span>\n                  </div>\n                )}\n                <div>\n                  <p className=\"font-medium\">{user?.firstName || user?.email}</p>\n                  <p className=\"text-sm text-gray-600\">{user?.email}</p>\n                </div>\n              </div>\n\n              <Separator />\n\n              <Button\n                variant=\"destructive\"\n                onClick={handleLogout}\n                className=\"w-full\"\n                data-testid=\"logout-button\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                {t(\"settings.logout\")}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12434},"client/src/pages/tank-management.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, Truck, Edit3, Trash2, Fuel } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\ninterface TankManagementPageProps {\n  onBack: () => void;\n}\n\nconst tankSchema = z.object({\n  tankNumber: z.string().min(1, \"Tank number is required\"),\n  productId: z.string().min(1, \"Product is required\"),\n  capacity: z.number().min(1, \"Capacity must be greater than 0\"),\n  length: z.number().min(0.1, \"Length must be greater than 0\"),\n  diameter: z.number().min(0.1, \"Diameter must be greater than 0\"),\n});\n\ntype TankForm = z.infer<typeof tankSchema>;\n\nexport default function TankManagementPage({ onBack }: TankManagementPageProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingTank, setEditingTank] = useState<any>(null);\n\n  const { data: tanks = [], isLoading } = useQuery({\n    queryKey: [\"/api/tanks\"],\n  }) as { data: any[], isLoading: boolean };\n\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n  }) as { data: any[] };\n\n  const form = useForm<TankForm>({\n    resolver: zodResolver(tankSchema),\n    defaultValues: {\n      tankNumber: \"\",\n      productId: \"\",\n      capacity: 0,\n      length: 0,\n      diameter: 0,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: TankForm) => {\n      const response = await apiRequest(\"/api/tanks\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"tankManagement.createSuccess\"),\n      });\n      setIsDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/tanks\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: TankForm }) => {\n      const response = await apiRequest(`/api/tanks/${id}`, \"PUT\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"tankManagement.updateSuccess\"),\n      });\n      setIsDialogOpen(false);\n      setEditingTank(null);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/tanks\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(`/api/tanks/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"tankManagement.deleteSuccess\"),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tanks\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: t(\"common.error\"),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: TankForm) => {\n    if (editingTank) {\n      updateMutation.mutate({ id: editingTank.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (tank: any) => {\n    setEditingTank(tank);\n    form.reset({\n      tankNumber: tank.tankNumber,\n      productId: tank.productId,\n      capacity: tank.capacity,\n      length: tank.length,\n      diameter: tank.diameter,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleAddNew = () => {\n    setEditingTank(null);\n    form.reset();\n    setIsDialogOpen(true);\n  };\n\n  const getFuelTypeColor = (fuelType: string) => {\n    switch (fuelType) {\n      case \"petrol\": return \"text-red-600 bg-red-50\";\n      case \"diesel\": return \"text-yellow-600 bg-yellow-50\";\n      case \"cng\": return \"text-green-600 bg-green-50\";\n      default: return \"text-gray-600 bg-gray-50\";\n    }\n  };\n\n  const getStatusColor = (currentLevel: number, minThreshold: number, capacity: number) => {\n    const percentage = (currentLevel / capacity) * 100;\n    if (currentLevel <= minThreshold) return \"text-red-600 bg-red-50\";\n    if (percentage < 25) return \"text-orange-600 bg-orange-50\";\n    return \"text-green-600 bg-green-50\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 pb-20\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onBack}\n            className=\"mr-3\"\n            data-testid=\"back-button\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n            {t(\"menu.tankManagement\")}\n          </h1>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleAddNew} data-testid=\"add-tank-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"tankManagement.addTank\")}\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingTank ? t(\"tankManagement.editTank\") : t(\"tankManagement.addTank\")}\n              </DialogTitle>\n              <DialogDescription>\n                {editingTank ? t(\"tankManagement.editDescription\") : t(\"tankManagement.addDescription\")}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tankNumber\">Tank Number</Label>\n                <Input\n                  id=\"tankNumber\"\n                  {...form.register(\"tankNumber\")}\n                  data-testid=\"input-tank-number\"\n                  placeholder=\"Tank 1, Tank 2, etc.\"\n                />\n                {form.formState.errors.tankNumber && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.tankNumber.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Product</Label>\n                <Select\n                  value={form.watch(\"productId\")}\n                  onValueChange={(value) => form.setValue(\"productId\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-product\">\n                    <SelectValue placeholder=\"Select a product\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {products.map((product: any) => (\n                      <SelectItem key={product.id} value={product.id}>\n                        {product.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.productId && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.productId.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"capacity\">Capacity (L)</Label>\n                <Input\n                  id=\"capacity\"\n                  type=\"number\"\n                  {...form.register(\"capacity\", { valueAsNumber: true })}\n                  data-testid=\"input-capacity\"\n                />\n                {form.formState.errors.capacity && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.capacity.message}</p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"length\">Length (m)</Label>\n                  <Input\n                    id=\"length\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"e.g. 1.5\"\n                    {...form.register(\"length\", { valueAsNumber: true })}\n                    data-testid=\"input-length\"\n                  />\n                  {form.formState.errors.length && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.length.message}</p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"diameter\">Diameter (m)</Label>\n                  <Input\n                    id=\"diameter\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"e.g. 2.5\"\n                    {...form.register(\"diameter\", { valueAsNumber: true })}\n                    data-testid=\"input-diameter\"\n                  />\n                  {form.formState.errors.diameter && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.diameter.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex space-x-3 pt-4\">\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"save-tank-button\"\n                >\n                  {(createMutation.isPending || updateMutation.isPending) ? \n                    t(\"common.saving\") : t(\"common.save\")}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                  className=\"flex-1\"\n                  data-testid=\"cancel-tank-button\"\n                >\n                  {t(\"common.cancel\")}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Tanks List */}\n      {tanks.length === 0 ? (\n        <Card className=\"text-center py-8\">\n          <CardContent>\n            <Truck className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">{t(\"tankManagement.noTanks\")}</h3>\n            <p className=\"text-gray-600 mb-4\">{t(\"tankManagement.noTanksDescription\")}</p>\n            <Button onClick={handleAddNew} data-testid=\"add-first-tank-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"tankManagement.addFirstTank\")}\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {tanks.map((tank: any) => {\n            const product = products.find((p: any) => p.id === tank.productId);\n            return (\n              <Card key={tank.id} data-testid={`tank-card-${tank.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"p-2 rounded-lg bg-primary/10\">\n                        <Fuel className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium\" data-testid={`tank-name-${tank.id}`}>\n                          Tank {tank.tankNumber}\n                        </h3>\n                        <span className=\"inline-block px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                          {product?.name || 'Unknown Product'}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleEdit(tank)}\n                        data-testid={`edit-tank-${tank.id}`}\n                      >\n                        <Edit3 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => deleteMutation.mutate(tank.id)}\n                        disabled={deleteMutation.isPending}\n                        data-testid={`delete-tank-${tank.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Capacity:</span>\n                        <span className=\"ml-2 font-medium\">{tank.capacity}L</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Length:</span>\n                        <span className=\"ml-2 font-medium\">{tank.length}m</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Diameter:</span>\n                        <span className=\"ml-2 font-medium\">{tank.diameter}m</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Price:</span>\n                        <span className=\"ml-2 font-medium\">₹{product?.pricePerLiter || 0}/L</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14760}}}